;
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <alcd.h>
;#include <delay.h>
;#include <string.h>
;
;#define DOT_TIME_MS 400
;#define CHAR_END_TIME_MS 1000
;#define SPACE_MARK_TIME_MS 2000
;#define WORD_END_TIME_MS 2000  // 2 seconds for word end
;#define EEPROM_START_ADDR 0x00
;
;
;
;
;int i;
;
;typedef struct {
;    char *code; // pointer string array for efficiency in memory
;    char letter;
;} MorseDictionary;// type of data
;
;MorseDictionary morse_dict[] = {
;    {".-", 'A'}, {"-...", 'B'}, {"-.-.", 'C'}, {"-..", 'D'}, {".", 'E'},
;    {"..-.", 'F'}, {"--.", 'G'}, {"....", 'H'}, {"..", 'I'}, {".---", 'J'},
;    {"-.-", 'K'}, {".-..", 'L'}, {"--", 'M'}, {"-.", 'N'}, {"---", 'O'},
;    {".--.", 'P'}, {"--.-", 'Q'}, {".-.", 'R'}, {"...", 'S'}, {"-", 'T'},
;    {"..-", 'U'}, {"...-", 'V'}, {".--", 'W'}, {"-..-", 'X'}, {"-.--", 'Y'},
;    {"--..", 'Z'}
;};

	.DSEG
_0x3:
	.BYTE 0x6C
;
;int button_pressed = 0;
;int press_duration = 0;
;int idle_time = 0; //not pressed duration
;char morse_buffer[10]; //store morse code
;int morse_index = 0; //position of char in morse
;char eeprom_data[100];
;int eeprom_index = 0;
;int word_end_flag = 0;  // flag to track if word end is detected
;
;void init_interrupts(void);
;void process_morse(void);
;void decode_morse(void);
;void write_morse_to_eeprom(void);
;void read_morse_from_eeprom(void);  // Function prototype
;void reset_system(void);  // Function prototype for reset button handling
;
;void WRITER_EEPROM(unsigned char addr, unsigned char data) {
; 0000 0031 void WRITER_EEPROM(unsigned char addr, unsigned char data) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0032     while (EECR & (1 << EEWE));
;PCODE: $0000000F VOL: 0
;	addr -> Y+1
;	data -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0033     EEAR = addr;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0034     EEDR = data;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0035     EECR |= (1 << EEMWE);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0036     EECR |= (1 << EEWE);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0037 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;
;unsigned char READER_EEPROM(unsigned char addr) {
; 0000 0039 unsigned char READER_EEPROM(unsigned char addr) {
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003A     while (EECR & (1 << EEWE));
;PCODE: $00000024 VOL: 0
;	addr -> Y+0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003B     EEAR = addr;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003C     EECR |= (1 << EERE);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003D     return EEDR;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 003E }
;PCODE: $00000033 VOL: 0
;
;void main(void) {
; 0000 0040 void main(void) {
;PCODE: $00000034 VOL: 0
; 0000 0041     lcd_init(32);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0042 
; 0000 0043     DDRD &= ~(1 << 2);   // PD2 input for Morse button
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0044     PORTD |= (1 << 2);   // Enable pull-up on PD2
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0045     DDRD &= ~(1 << 3);   // PD3 input for Read button
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0046     PORTD |= (1 << 3);   // Enable pull-up on PD3
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0047     DDRD &= ~(1 << 4);   // PD4 input for Write button
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0048     PORTD |= (1 << 4);   // Enable pull-up on PD4
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0049 
; 0000 004A     DDRD &= ~(1 << 5);   // PD5 input for Reset button
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004B     PORTD |= (1 << 5);   // Enable pull-up on PD5
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 004C 
; 0000 004D     init_interrupts();
;PCODE: $00000047 VOL: 0
; 0000 004E 
; 0000 004F     #asm("sei")
;PCODE: $00000048 VOL: 0
	sei
;PCODE: $00000049 VOL: 0
; 0000 0050 
; 0000 0051     while (1) {
;PCODE: $0000004A VOL: 0
; 0000 0052         if (button_pressed) {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0053             process_morse();
;PCODE: $0000004D VOL: 0
; 0000 0054             button_pressed = 0;
;PCODE: $0000004E VOL: 0
; 0000 0055         }
; 0000 0056 
; 0000 0057         // check for space mark
; 0000 0058         if (idle_time >= SPACE_MARK_TIME_MS && morse_index > 0) {
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0059             morse_buffer[morse_index] = '\0';
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 005A             eeprom_data[eeprom_index++] = ' ';
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 005B             morse_index = 0;
;PCODE: $00000065 VOL: 0
; 0000 005C             idle_time = 0;  // Store space mark
;PCODE: $00000066 VOL: 0
; 0000 005D         }
; 0000 005E         // check for end of character to be shown
; 0000 005F         else if (idle_time >= CHAR_END_TIME_MS && morse_index > 0) {
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0060             morse_buffer[morse_index] = '\0';
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0061             decode_morse();
;PCODE: $00000076 VOL: 0
; 0000 0062             morse_index = 0;
;PCODE: $00000077 VOL: 0
; 0000 0063             idle_time = 0;
;PCODE: $00000078 VOL: 0
; 0000 0064             word_end_flag = 0;  // Reset word end flag after character decode
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0065         }
; 0000 0066 
; 0000 0067         // Check for end of word
; 0000 0068         if (idle_time >= WORD_END_TIME_MS && eeprom_index > 0 && !word_end_flag) {
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0069             eeprom_data[eeprom_index++] = ' ';  // Space between words
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 006A             word_end_flag = 1;  // Set flag to indicate word end added
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 006B             idle_time = 0;
;PCODE: $00000094 VOL: 0
; 0000 006C         }
; 0000 006D 
; 0000 006E         if (!(PIND & (1 << 4))) {
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 006F             write_morse_to_eeprom();
;PCODE: $00000099 VOL: 0
; 0000 0070             lcd_clear();
;PCODE: $0000009A VOL: 0
; 0000 0071             lcd_puts("Word stored");
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0072             delay_ms(1000);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0073             lcd_clear();
;PCODE: $000000A0 VOL: 0
; 0000 0074             idle_time = 0;
;PCODE: $000000A1 VOL: 0
; 0000 0075             word_end_flag = 0;  // Reset flag after word write
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0076         }
; 0000 0077 
; 0000 0078         if (!(PIND & (1 << 3))) {
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0079             read_morse_from_eeprom();  // Call function to read from EEPROM
;PCODE: $000000A8 VOL: 0
; 0000 007A             idle_time = 0;
;PCODE: $000000A9 VOL: 0
; 0000 007B             while (!(PIND & (1 << 3)));  // Wait until Read button is released
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 007C         }
; 0000 007D 
; 0000 007E         if (!(PIND & (1 << 5))) {
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 007F             reset_system();  // Call reset function when reset button is pressed
;PCODE: $000000B4 VOL: 0
; 0000 0080             while (!(PIND & (1 << 5)));  // Wait until Reset button is released
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0081         }
; 0000 0082 
; 0000 0083         delay_ms(1);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0084         idle_time++;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0085     }
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0086 }
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0

	.DSEG
_0x1A:
	.BYTE 0xC
;
;void init_interrupts(void) {
; 0000 0088 void init_interrupts(void) {

	.CSEG
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0089     MCUCR |= (1 << ISC01);  // Trigger INT0 on falling edge
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 008A     GICR |= (1 << INT0);    // Enable INT0 interrupt
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 008B }
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;
;interrupt [EXT_INT0] void ext_int0_isr(void) {
; 0000 008D interrupt [2] void ext_int0_isr(void) {
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 008E     if (!(PIND & (1 << 2))) {
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 008F         while (!(PIND & (1 << 2))) {
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0090             press_duration++;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0091             delay_ms(1);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0092         }
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0093         button_pressed = 1;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0094     }
; 0000 0095 }
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;
;void process_morse(void) {
; 0000 0097 void process_morse(void) {
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0098     if (press_duration > DOT_TIME_MS) {
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0099         morse_buffer[morse_index++] = '-';
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 009A     } else {
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 009B         morse_buffer[morse_index++] = '.';
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 009C     }
;PCODE: $000000FD VOL: 0
; 0000 009D 
; 0000 009E     morse_buffer[morse_index] = '\0';
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 009F     lcd_clear();
;PCODE: $00000102 VOL: 0
; 0000 00A0     lcd_puts(morse_buffer);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00A1 
; 0000 00A2     press_duration = 0;
;PCODE: $00000105 VOL: 0
; 0000 00A3     idle_time = 0;
;PCODE: $00000106 VOL: 0
; 0000 00A4 }
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;
;void decode_morse(void) {
; 0000 00A6 void decode_morse(void) {
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00A7     // Find the corresponding letter for the morse code
; 0000 00A8 
; 0000 00A9 //sizr morse dict is count chars * 8 bytes = 26* 8
; 0000 00AA // sizeof(morse_dict[0] is 8
; 0000 00AB 
; 0000 00AC     for (i = 0; i < sizeof(morse_dict) / sizeof(morse_dict[0]); i++) {
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00AD         if (strcmp(morse_dict[i].code, morse_buffer) == 0) { //if codes are the same
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00AE             eeprom_data[eeprom_index++] = morse_dict[i].letter;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00AF             lcd_clear();
;PCODE: $0000012E VOL: 0
; 0000 00B0             lcd_puts(eeprom_data);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 00B1             break;
;PCODE: $00000131 VOL: 0
; 0000 00B2         }
; 0000 00B3     }
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00B4 }
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;
;void write_morse_to_eeprom(void) {
; 0000 00B6 void write_morse_to_eeprom(void) {
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00B7     for (i = 0; i < eeprom_index; i++) {
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 00B8         WRITER_EEPROM(EEPROM_START_ADDR + i, eeprom_data[i]); //write data in eeprom buffer to eeprom one by one
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00B9     }
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00BA     WRITER_EEPROM(EEPROM_START_ADDR + eeprom_index, '\0'); // flag end of data
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 00BB     eeprom_index = 0; //clears buffer for new data
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00BC }
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;
;void read_morse_from_eeprom(void) {
; 0000 00BE void read_morse_from_eeprom(void) {
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00BF     int index = 0;
; 0000 00C0     unsigned char data;
; 0000 00C1 
; 0000 00C2     lcd_clear();
;PCODE: $0000015C VOL: 0
;	index -> R16,R17
;	data -> R19
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00C3     while (1) {
;PCODE: $00000160 VOL: 0
; 0000 00C4         data = READER_EEPROM(EEPROM_START_ADDR + index);
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00C5         if (data == '\0') {
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00C6             // end of message then exit loop
; 0000 00C7             break;
;PCODE: $00000166 VOL: 0
; 0000 00C8         } else if (data == ' ') {
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 00C9             // space between words
; 0000 00CA             lcd_putchar(' ');
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 00CB         } else {
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00CC             // Display character
; 0000 00CD             lcd_putchar(data);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 00CE         }
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 00CF         index++;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 00D0         delay_ms(50);  // Delay for visual separation (adjust as needed)
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00D1     }
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00D2 }
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;
;void reset_system(void) {
; 0000 00D4 void reset_system(void) {
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 00D5     // Perform actions to reset the system
; 0000 00D6     eeprom_index = 0;
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00D7     morse_index = 0;
;PCODE: $00000183 VOL: 0
; 0000 00D8     word_end_flag = 0;
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00D9     lcd_clear();
;PCODE: $00000186 VOL: 0
; 0000 00DA     lcd_puts("System reset");
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 00DB     delay_ms(1000);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 00DC     lcd_clear();
;PCODE: $0000018C VOL: 0
; 0000 00DD }
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0

	.DSEG
_0x38:
	.BYTE 0xD
