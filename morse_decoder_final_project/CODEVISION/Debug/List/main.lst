
AVRASM ver. 2.1.30  D:\UNI\Micro\A-PROJECTS\FinalProj\CODEVISION\Debug\List\main.asm Mon Jul 29 08:54:25 2024

D:\UNI\Micro\A-PROJECTS\FinalProj\CODEVISION\Debug\List\main.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\UNI\Micro\A-PROJECTS\FinalProj\CODEVISION\Debug\List\main.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\UNI\Micro\A-PROJECTS\FinalProj\CODEVISION\Debug\List\main.asm(1090): warning: Register r6 already defined by the .DEF directive
D:\UNI\Micro\A-PROJECTS\FinalProj\CODEVISION\Debug\List\main.asm(1091): warning: Register r7 already defined by the .DEF directive
D:\UNI\Micro\A-PROJECTS\FinalProj\CODEVISION\Debug\List\main.asm(1092): warning: Register r8 already defined by the .DEF directive
D:\UNI\Micro\A-PROJECTS\FinalProj\CODEVISION\Debug\List\main.asm(1093): warning: Register r9 already defined by the .DEF directive
D:\UNI\Micro\A-PROJECTS\FinalProj\CODEVISION\Debug\List\main.asm(1094): warning: Register r10 already defined by the .DEF directive
D:\UNI\Micro\A-PROJECTS\FinalProj\CODEVISION\Debug\List\main.asm(1095): warning: Register r11 already defined by the .DEF directive
D:\UNI\Micro\A-PROJECTS\FinalProj\CODEVISION\Debug\List\main.asm(1096): warning: Register r12 already defined by the .DEF directive
D:\UNI\Micro\A-PROJECTS\FinalProj\CODEVISION\Debug\List\main.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _i_msb=R5
                 	.DEF _button_pressed=R6
                 	.DEF _button_pressed_msb=R7
                 	.DEF _press_duration=R8
                 	.DEF _press_duration_msb=R9
                 	.DEF _idle_time=R10
                 	.DEF _idle_time_msb=R11
                 	.DEF _morse_index=R12
                 	.DEF _morse_index_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00ea 	JMP  __RESET
000002 940c 01a9 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0
00002c 0000
00002d 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x4:
00002e 0260
00002f 6341
000030 4202
000031 0268      	.DB  LOW(_0x3),HIGH(_0x3),0x41,LOW(_0x3+3),HIGH(_0x3+3),0x42,LOW(_0x3+8),HIGH(_0x3+8)
000032 6d43
000033 4402
000034 0271
000035 7345      	.DB  0x43,LOW(_0x3+13),HIGH(_0x3+13),0x44,LOW(_0x3+17),HIGH(_0x3+17),0x45,LOW(_0x3+19)
000036 4602
000037 0278
000038 7c47
000039 4802      	.DB  HIGH(_0x3+19),0x46,LOW(_0x3+24),HIGH(_0x3+24),0x47,LOW(_0x3+28),HIGH(_0x3+28),0x48
00003a 0281
00003b 8449
00003c 4a02
00003d 0289      	.DB  LOW(_0x3+33),HIGH(_0x3+33),0x49,LOW(_0x3+36),HIGH(_0x3+36),0x4A,LOW(_0x3+41),HIGH(_0x3+41)
00003e 8d4b
00003f 4c02
000040 0292
000041 954d      	.DB  0x4B,LOW(_0x3+45),HIGH(_0x3+45),0x4C,LOW(_0x3+50),HIGH(_0x3+50),0x4D,LOW(_0x3+53)
000042 4e02
000043 0298
000044 9c4f
000045 5002      	.DB  HIGH(_0x3+53),0x4E,LOW(_0x3+56),HIGH(_0x3+56),0x4F,LOW(_0x3+60),HIGH(_0x3+60),0x50
000046 02a1
000047 a651
000048 5202
000049 02aa      	.DB  LOW(_0x3+65),HIGH(_0x3+65),0x51,LOW(_0x3+70),HIGH(_0x3+70),0x52,LOW(_0x3+74),HIGH(_0x3+74)
00004a ae53
00004b 5402
00004c 02b0
00004d b455      	.DB  0x53,LOW(_0x3+78),HIGH(_0x3+78),0x54,LOW(_0x3+80),HIGH(_0x3+80),0x55,LOW(_0x3+84)
00004e 5602
00004f 02b9
000050 bd57
000051 5802      	.DB  HIGH(_0x3+84),0x56,LOW(_0x3+89),HIGH(_0x3+89),0x57,LOW(_0x3+93),HIGH(_0x3+93),0x58
000052 02c2
000053 c759
000054 5a02      	.DB  LOW(_0x3+98),HIGH(_0x3+98),0x59,LOW(_0x3+103),HIGH(_0x3+103),0x5A
                 _0x0:
000055 2d2e
000056 2d00
000057 2e2e
000058 002e      	.DB  0x2E,0x2D,0x0,0x2D,0x2E,0x2E,0x2E,0x0
000059 2e2d
00005a 2e2d
00005b 2d00
00005c 2e2e      	.DB  0x2D,0x2E,0x2D,0x2E,0x0,0x2D,0x2E,0x2E
00005d 2e00
00005e 2d2e
00005f 002e
000060 2d2d      	.DB  0x0,0x2E,0x2E,0x2D,0x2E,0x0,0x2D,0x2D
000061 002e
000062 2e2e
000063 2e2e
000064 2e00      	.DB  0x2E,0x0,0x2E,0x2E,0x2E,0x2E,0x0,0x2E
000065 2d2d
000066 002d
000067 2e2d
000068 002d      	.DB  0x2D,0x2D,0x2D,0x0,0x2D,0x2E,0x2D,0x0
000069 2d2e
00006a 2e2e
00006b 2e00
00006c 2d2d      	.DB  0x2E,0x2D,0x2E,0x2E,0x0,0x2E,0x2D,0x2D
00006d 002e
00006e 2d2d
00006f 2d2e
000070 2e00      	.DB  0x2E,0x0,0x2D,0x2D,0x2E,0x2D,0x0,0x2E
000071 2d2e
000072 2e00
000073 2e2e
000074 002d      	.DB  0x2E,0x2D,0x0,0x2E,0x2E,0x2E,0x2D,0x0
000075 2d2e
000076 002d
000077 2e2d
000078 2d2e      	.DB  0x2E,0x2D,0x2D,0x0,0x2D,0x2E,0x2E,0x2D
000079 2d00
00007a 2d2e
00007b 002d
00007c 2d2d      	.DB  0x0,0x2D,0x2E,0x2D,0x2D,0x0,0x2D,0x2D
00007d 2e2e
00007e 5700
00007f 726f
000080 2064      	.DB  0x2E,0x2E,0x0,0x57,0x6F,0x72,0x64,0x20
000081 7473
000082 726f
000083 6465
000084 5300      	.DB  0x73,0x74,0x6F,0x72,0x65,0x64,0x0,0x53
000085 7379
000086 6574
000087 206d
000088 6572      	.DB  0x79,0x73,0x74,0x65,0x6D,0x20,0x72,0x65
000089 6573
00008a 0074      	.DB  0x73,0x65,0x74,0x0
                 _0x2000003:
00008b c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00008c 0008      	.DW  0x08
00008d 0006      	.DW  0x06
00008e 0054      	.DW  __REG_VARS*2
                 
00008f 0003      	.DW  0x03
000090 0260      	.DW  _0x3
000091 00aa      	.DW  _0x0*2
                 
000092 0005      	.DW  0x05
000093 0263      	.DW  _0x3+3
000094 00ad      	.DW  _0x0*2+3
                 
000095 0005      	.DW  0x05
000096 0268      	.DW  _0x3+8
000097 00b2      	.DW  _0x0*2+8
                 
000098 0004      	.DW  0x04
000099 026d      	.DW  _0x3+13
00009a 00b7      	.DW  _0x0*2+13
                 
00009b 0002      	.DW  0x02
00009c 0271      	.DW  _0x3+17
00009d 00b0      	.DW  _0x0*2+6
                 
00009e 0005      	.DW  0x05
00009f 0273      	.DW  _0x3+19
0000a0 00bb      	.DW  _0x0*2+17
                 
0000a1 0004      	.DW  0x04
0000a2 0278      	.DW  _0x3+24
0000a3 00c0      	.DW  _0x0*2+22
                 
0000a4 0005      	.DW  0x05
0000a5 027c      	.DW  _0x3+28
0000a6 00c4      	.DW  _0x0*2+26
                 
0000a7 0003      	.DW  0x03
0000a8 0281      	.DW  _0x3+33
0000a9 00af      	.DW  _0x0*2+5
                 
0000aa 0005      	.DW  0x05
0000ab 0284      	.DW  _0x3+36
0000ac 00c9      	.DW  _0x0*2+31
                 
0000ad 0004      	.DW  0x04
0000ae 0289      	.DW  _0x3+41
0000af 00ce      	.DW  _0x0*2+36
                 
0000b0 0005      	.DW  0x05
0000b1 028d      	.DW  _0x3+45
0000b2 00d2      	.DW  _0x0*2+40
                 
0000b3 0003      	.DW  0x03
0000b4 0292      	.DW  _0x3+50
0000b5 00cb      	.DW  _0x0*2+33
                 
0000b6 0003      	.DW  0x03
0000b7 0295      	.DW  _0x3+53
0000b8 00b4      	.DW  _0x0*2+10
                 
0000b9 0004      	.DW  0x04
0000ba 0298      	.DW  _0x3+56
0000bb 00ca      	.DW  _0x0*2+32
                 
0000bc 0005      	.DW  0x05
0000bd 029c      	.DW  _0x3+60
0000be 00d7      	.DW  _0x0*2+45
                 
0000bf 0005      	.DW  0x05
0000c0 02a1      	.DW  _0x3+65
0000c1 00dc      	.DW  _0x0*2+50
                 
0000c2 0004      	.DW  0x04
0000c3 02a6      	.DW  _0x3+70
0000c4 00b3      	.DW  _0x0*2+9
                 
0000c5 0004      	.DW  0x04
0000c6 02aa      	.DW  _0x3+74
0000c7 00ae      	.DW  _0x0*2+4
                 
0000c8 0002      	.DW  0x02
0000c9 02ae      	.DW  _0x3+78
0000ca 00ab      	.DW  _0x0*2+1
                 
0000cb 0004      	.DW  0x04
0000cc 02b0      	.DW  _0x3+80
0000cd 00e1      	.DW  _0x0*2+55
                 
0000ce 0005      	.DW  0x05
0000cf 02b4      	.DW  _0x3+84
0000d0 00e5      	.DW  _0x0*2+59
                 
0000d1 0004      	.DW  0x04
0000d2 02b9      	.DW  _0x3+89
0000d3 00ea      	.DW  _0x0*2+64
                 
0000d4 0005      	.DW  0x05
0000d5 02bd      	.DW  _0x3+93
0000d6 00ee      	.DW  _0x0*2+68
                 
0000d7 0005      	.DW  0x05
0000d8 02c2      	.DW  _0x3+98
0000d9 00f3      	.DW  _0x0*2+73
                 
0000da 0005      	.DW  0x05
0000db 02c7      	.DW  _0x3+103
0000dc 00f8      	.DW  _0x0*2+78
                 
0000dd 004e      	.DW  0x4E
0000de 02e5      	.DW  _morse_dict
0000df 005c      	.DW  _0x4*2
                 
0000e0 000c      	.DW  0x0C
0000e1 02cc      	.DW  _0x1A
0000e2 00fd      	.DW  _0x0*2+83
                 
0000e3 000d      	.DW  0x0D
0000e4 02d8      	.DW  _0x38
0000e5 0109      	.DW  _0x0*2+95
                 
0000e6 0002      	.DW  0x02
0000e7 03a5      	.DW  __base_y_G100
0000e8 0116      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
0000e9 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000ea 94f8      	CLI
0000eb 27ee      	CLR  R30
0000ec bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000ed e0f1      	LDI  R31,1
0000ee bffb      	OUT  GICR,R31
0000ef bfeb      	OUT  GICR,R30
0000f0 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000f1 e08d      	LDI  R24,(14-2)+1
0000f2 e0a2      	LDI  R26,2
0000f3 27bb      	CLR  R27
                 __CLEAR_REG:
0000f4 93ed      	ST   X+,R30
0000f5 958a      	DEC  R24
0000f6 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000f7 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000f8 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000f9 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000fa 93ed      	ST   X+,R30
0000fb 9701      	SBIW R24,1
0000fc f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000fd e1e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000fe e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000ff 9185      	LPM  R24,Z+
000100 9195      	LPM  R25,Z+
000101 9700      	SBIW R24,0
000102 f061      	BREQ __GLOBAL_INI_END
000103 91a5      	LPM  R26,Z+
000104 91b5      	LPM  R27,Z+
000105 9005      	LPM  R0,Z+
000106 9015      	LPM  R1,Z+
000107 01bf      	MOVW R22,R30
000108 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000109 9005      	LPM  R0,Z+
00010a 920d      	ST   X+,R0
00010b 9701      	SBIW R24,1
00010c f7e1      	BRNE __GLOBAL_INI_LOOP
00010d 01fb      	MOVW R30,R22
00010e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00010f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000110 bfed      	OUT  SPL,R30
000111 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000112 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000113 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000114 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000115 940c 012f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;
                 ;#define DOT_TIME_MS 400
                 ;#define CHAR_END_TIME_MS 1000
                 ;#define SPACE_MARK_TIME_MS 2000
                 ;#define WORD_END_TIME_MS 2000  // 2 seconds for word end
                 ;#define EEPROM_START_ADDR 0x00
                 ;
                 ;
                 ;
                 ;
                 ;int i;
                 ;
                 ;typedef struct {
                 ;    char *code; // pointer string array for efficiency in memory
                 ;    char letter;
                 ;} MorseDictionary;// type of data
                 ;
                 ;MorseDictionary morse_dict[] = {
                 ;    {".-", 'A'}, {"-...", 'B'}, {"-.-.", 'C'}, {"-..", 'D'}, {".", 'E'},
                 ;    {"..-.", 'F'}, {"--.", 'G'}, {"....", 'H'}, {"..", 'I'}, {".---", 'J'},
                 ;    {"-.-", 'K'}, {".-..", 'L'}, {"--", 'M'}, {"-.", 'N'}, {"---", 'O'},
                 ;    {".--.", 'P'}, {"--.-", 'Q'}, {".-.", 'R'}, {"...", 'S'}, {"-", 'T'},
                 ;    {"..-", 'U'}, {"...-", 'V'}, {".--", 'W'}, {"-..-", 'X'}, {"-.--", 'Y'},
                 ;    {"--..", 'Z'}
                 ;};
                 
                 	.DSEG
                 _0x3:
000260           	.BYTE 0x6C
                 ;
                 ;int button_pressed = 0;
                 ;int press_duration = 0;
                 ;int idle_time = 0; //not pressed duration
                 ;char morse_buffer[10]; //store morse code
                 ;int morse_index = 0; //position of char in morse
                 ;char eeprom_data[100];
                 ;int eeprom_index = 0;
                 ;int word_end_flag = 0;  // flag to track if word end is detected
                 ;
                 ;void init_interrupts(void);
                 ;void process_morse(void);
                 ;void decode_morse(void);
                 ;void write_morse_to_eeprom(void);
                 ;void read_morse_from_eeprom(void);  // Function prototype
                 ;void reset_system(void);  // Function prototype for reset button handling
                 ;
                 ;void WRITER_EEPROM(unsigned char addr, unsigned char data) {
                 ; 0000 0031 void WRITER_EEPROM(unsigned char addr, unsigned char data) {
                 
                 	.CSEG
                 _WRITER_EEPROM:
                 ; .FSTART _WRITER_EEPROM
                 ; 0000 0032     while (EECR & (1 << EEWE));
000117 93aa      	ST   -Y,R26
                 ;	addr -> Y+1
                 ;	data -> Y+0
                 _0x5:
000118 99e1      	SBIC 0x1C,1
000119 cffe      	RJMP _0x5
                 ; 0000 0033     EEAR = addr;
00011a 81e9      	LDD  R30,Y+1
00011b e0f0      	LDI  R31,0
00011c bbff      	OUT  0x1E+1,R31
00011d bbee      	OUT  0x1E,R30
                 ; 0000 0034     EEDR = data;
00011e 81e8      	LD   R30,Y
00011f bbed      	OUT  0x1D,R30
                 ; 0000 0035     EECR |= (1 << EEMWE);
000120 9ae2      	SBI  0x1C,2
                 ; 0000 0036     EECR |= (1 << EEWE);
000121 9ae1      	SBI  0x1C,1
                 ; 0000 0037 }
000122 940c 02af 	JMP  _0x2040002
                 ; .FEND
                 ;
                 ;unsigned char READER_EEPROM(unsigned char addr) {
                 ; 0000 0039 unsigned char READER_EEPROM(unsigned char addr) {
                 _READER_EEPROM:
                 ; .FSTART _READER_EEPROM
                 ; 0000 003A     while (EECR & (1 << EEWE));
000124 93aa      	ST   -Y,R26
                 ;	addr -> Y+0
                 _0x8:
000125 99e1      	SBIC 0x1C,1
000126 cffe      	RJMP _0x8
                 ; 0000 003B     EEAR = addr;
000127 81e8      	LD   R30,Y
000128 e0f0      	LDI  R31,0
000129 bbff      	OUT  0x1E+1,R31
00012a bbee      	OUT  0x1E,R30
                 ; 0000 003C     EECR |= (1 << EERE);
00012b 9ae0      	SBI  0x1C,0
                 ; 0000 003D     return EEDR;
00012c b3ed      	IN   R30,0x1D
00012d 940c 031e 	JMP  _0x2040001
                 ; 0000 003E }
                 ; .FEND
                 ;
                 ;void main(void) {
                 ; 0000 0040 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 0041     lcd_init(32);
00012f e2a0      	LDI  R26,LOW(32)
000130 940e 02f0 	CALL _lcd_init
                 ; 0000 0042 
                 ; 0000 0043     DDRD &= ~(1 << 2);   // PD2 input for Morse button
000132 988a      	CBI  0x11,2
                 ; 0000 0044     PORTD |= (1 << 2);   // Enable pull-up on PD2
000133 9a92      	SBI  0x12,2
                 ; 0000 0045     DDRD &= ~(1 << 3);   // PD3 input for Read button
000134 988b      	CBI  0x11,3
                 ; 0000 0046     PORTD |= (1 << 3);   // Enable pull-up on PD3
000135 9a93      	SBI  0x12,3
                 ; 0000 0047     DDRD &= ~(1 << 4);   // PD4 input for Write button
000136 988c      	CBI  0x11,4
                 ; 0000 0048     PORTD |= (1 << 4);   // Enable pull-up on PD4
000137 9a94      	SBI  0x12,4
                 ; 0000 0049 
                 ; 0000 004A     DDRD &= ~(1 << 5);   // PD5 input for Reset button
000138 988d      	CBI  0x11,5
                 ; 0000 004B     PORTD |= (1 << 5);   // Enable pull-up on PD5
000139 9a95      	SBI  0x12,5
                 ; 0000 004C 
                 ; 0000 004D     init_interrupts();
00013a d067      	RCALL _init_interrupts
                 ; 0000 004E 
                 ; 0000 004F     #asm("sei")
00013b 9478      	sei
                 ; 0000 0050 
                 ; 0000 0051     while (1) {
                 _0xB:
                 ; 0000 0052         if (button_pressed) {
00013c 2c06      	MOV  R0,R6
00013d 2807      	OR   R0,R7
00013e f019      	BREQ _0xE
                 ; 0000 0053             process_morse();
00013f d093      	RCALL _process_morse
                 ; 0000 0054             button_pressed = 0;
000140 2466      	CLR  R6
000141 2477      	CLR  R7
                 ; 0000 0055         }
                 ; 0000 0056 
                 ; 0000 0057         // check for space mark
                 ; 0000 0058         if (idle_time >= SPACE_MARK_TIME_MS && morse_index > 0) {
                 _0xE:
000142 ede0      	LDI  R30,LOW(2000)
000143 e0f7      	LDI  R31,HIGH(2000)
000144 16ae      	CP   R10,R30
000145 06bf      	CPC  R11,R31
000146 f024      	BRLT _0x10
000147 2400      	CLR  R0
000148 140c      	CP   R0,R12
000149 040d      	CPC  R0,R13
00014a f00c      	BRLT _0x11
                 _0x10:
00014b c009      	RJMP _0xF
                 _0x11:
                 ; 0000 0059             morse_buffer[morse_index] = '\0';
00014c 940e 0334 	CALL SUBOPT_0x0
                 ; 0000 005A             eeprom_data[eeprom_index++] = ' ';
00014e 940e 033b 	CALL SUBOPT_0x1
                 ; 0000 005B             morse_index = 0;
000150 24cc      	CLR  R12
000151 24dd      	CLR  R13
                 ; 0000 005C             idle_time = 0;  // Store space mark
000152 24aa      	CLR  R10
000153 24bb      	CLR  R11
                 ; 0000 005D         }
                 ; 0000 005E         // check for end of character to be shown
                 ; 0000 005F         else if (idle_time >= CHAR_END_TIME_MS && morse_index > 0) {
000154 c011      	RJMP _0x12
                 _0xF:
000155 eee8      	LDI  R30,LOW(1000)
000156 e0f3      	LDI  R31,HIGH(1000)
000157 16ae      	CP   R10,R30
000158 06bf      	CPC  R11,R31
000159 f024      	BRLT _0x14
00015a 2400      	CLR  R0
00015b 140c      	CP   R0,R12
00015c 040d      	CPC  R0,R13
00015d f00c      	BRLT _0x15
                 _0x14:
00015e c007      	RJMP _0x13
                 _0x15:
                 ; 0000 0060             morse_buffer[morse_index] = '\0';
00015f 940e 0334 	CALL SUBOPT_0x0
                 ; 0000 0061             decode_morse();
000161 d089      	RCALL _decode_morse
                 ; 0000 0062             morse_index = 0;
000162 24cc      	CLR  R12
000163 24dd      	CLR  R13
                 ; 0000 0063             idle_time = 0;
000164 940e 0348 	CALL SUBOPT_0x2
                 ; 0000 0064             word_end_flag = 0;  // Reset word end flag after character decode
                 ; 0000 0065         }
                 ; 0000 0066 
                 ; 0000 0067         // Check for end of word
                 ; 0000 0068         if (idle_time >= WORD_END_TIME_MS && eeprom_index > 0 && !word_end_flag) {
                 _0x13:
                 _0x12:
000166 ede0      	LDI  R30,LOW(2000)
000167 e0f7      	LDI  R31,HIGH(2000)
000168 16ae      	CP   R10,R30
000169 06bf      	CPC  R11,R31
00016a f06c      	BRLT _0x17
00016b 91a0 03a1 	LDS  R26,_eeprom_index
00016d 91b0 03a2 	LDS  R27,_eeprom_index+1
00016f 940e 0383 	CALL __CPW02
000171 f434      	BRGE _0x17
000172 91e0 03a3 	LDS  R30,_word_end_flag
000174 91f0 03a4 	LDS  R31,_word_end_flag+1
000176 9730      	SBIW R30,0
000177 f009      	BREQ _0x18
                 _0x17:
000178 c00a      	RJMP _0x16
                 _0x18:
                 ; 0000 0069             eeprom_data[eeprom_index++] = ' ';  // Space between words
000179 940e 033b 	CALL SUBOPT_0x1
                 ; 0000 006A             word_end_flag = 1;  // Set flag to indicate word end added
00017b e0e1      	LDI  R30,LOW(1)
00017c e0f0      	LDI  R31,HIGH(1)
00017d 93e0 03a3 	STS  _word_end_flag,R30
00017f 93f0 03a4 	STS  _word_end_flag+1,R31
                 ; 0000 006B             idle_time = 0;
000181 24aa      	CLR  R10
000182 24bb      	CLR  R11
                 ; 0000 006C         }
                 ; 0000 006D 
                 ; 0000 006E         if (!(PIND & (1 << 4))) {
                 _0x16:
000183 9984      	SBIC 0x10,4
000184 c008      	RJMP _0x19
                 ; 0000 006F             write_morse_to_eeprom();
000185 d09d      	RCALL _write_morse_to_eeprom
                 ; 0000 0070             lcd_clear();
000186 d12a      	RCALL _lcd_clear
                 ; 0000 0071             lcd_puts("Word stored");
                +
000187 ecac     +LDI R26 , LOW ( _0x1A + ( 0 ) )
000188 e0b2     +LDI R27 , HIGH ( _0x1A + ( 0 ) )
                 	__POINTW2MN _0x1A,0
000189 940e 0350 	CALL SUBOPT_0x3
                 ; 0000 0072             delay_ms(1000);
                 ; 0000 0073             lcd_clear();
                 ; 0000 0074             idle_time = 0;
00018b 940e 0348 	CALL SUBOPT_0x2
                 ; 0000 0075             word_end_flag = 0;  // Reset flag after word write
                 ; 0000 0076         }
                 ; 0000 0077 
                 ; 0000 0078         if (!(PIND & (1 << 3))) {
                 _0x19:
00018d 9983      	SBIC 0x10,3
00018e c005      	RJMP _0x1B
                 ; 0000 0079             read_morse_from_eeprom();  // Call function to read from EEPROM
00018f d0b3      	RCALL _read_morse_from_eeprom
                 ; 0000 007A             idle_time = 0;
000190 24aa      	CLR  R10
000191 24bb      	CLR  R11
                 ; 0000 007B             while (!(PIND & (1 << 3)));  // Wait until Read button is released
                 _0x1C:
000192 9b83      	SBIS 0x10,3
000193 cffe      	RJMP _0x1C
                 ; 0000 007C         }
                 ; 0000 007D 
                 ; 0000 007E         if (!(PIND & (1 << 5))) {
                 _0x1B:
000194 9985      	SBIC 0x10,5
000195 c003      	RJMP _0x1F
                 ; 0000 007F             reset_system();  // Call reset function when reset button is pressed
000196 d0c7      	RCALL _reset_system
                 ; 0000 0080             while (!(PIND & (1 << 5)));  // Wait until Reset button is released
                 _0x20:
000197 9b85      	SBIS 0x10,5
000198 cffe      	RJMP _0x20
                 ; 0000 0081         }
                 ; 0000 0082 
                 ; 0000 0083         delay_ms(1);
                 _0x1F:
000199 e0a1      	LDI  R26,LOW(1)
00019a e0b0      	LDI  R27,0
00019b 940e 036d 	CALL _delay_ms
                 ; 0000 0084         idle_time++;
00019d 01f5      	MOVW R30,R10
00019e 9631      	ADIW R30,1
00019f 015f      	MOVW R10,R30
                 ; 0000 0085     }
0001a0 cf9b      	RJMP _0xB
                 ; 0000 0086 }
                 _0x23:
0001a1 cfff      	RJMP _0x23
                 ; .FEND
                 
                 	.DSEG
                 _0x1A:
0002cc           	.BYTE 0xC
                 ;
                 ;void init_interrupts(void) {
                 ; 0000 0088 void init_interrupts(void) {
                 
                 	.CSEG
                 _init_interrupts:
                 ; .FSTART _init_interrupts
                 ; 0000 0089     MCUCR |= (1 << ISC01);  // Trigger INT0 on falling edge
0001a2 b7e5      	IN   R30,0x35
0001a3 60e2      	ORI  R30,2
0001a4 bfe5      	OUT  0x35,R30
                 ; 0000 008A     GICR |= (1 << INT0);    // Enable INT0 interrupt
0001a5 b7eb      	IN   R30,0x3B
0001a6 64e0      	ORI  R30,0x40
0001a7 bfeb      	OUT  0x3B,R30
                 ; 0000 008B }
0001a8 9508      	RET
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void) {
                 ; 0000 008D interrupt [2] void ext_int0_isr(void) {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
0001a9 920a      	ST   -Y,R0
0001aa 921a      	ST   -Y,R1
0001ab 92fa      	ST   -Y,R15
0001ac 936a      	ST   -Y,R22
0001ad 937a      	ST   -Y,R23
0001ae 938a      	ST   -Y,R24
0001af 939a      	ST   -Y,R25
0001b0 93aa      	ST   -Y,R26
0001b1 93ba      	ST   -Y,R27
0001b2 93ea      	ST   -Y,R30
0001b3 93fa      	ST   -Y,R31
0001b4 b7ef      	IN   R30,SREG
0001b5 93ea      	ST   -Y,R30
                 ; 0000 008E     if (!(PIND & (1 << 2))) {
0001b6 9982      	SBIC 0x10,2
0001b7 c00d      	RJMP _0x24
                 ; 0000 008F         while (!(PIND & (1 << 2))) {
                 _0x25:
0001b8 9982      	SBIC 0x10,2
0001b9 c008      	RJMP _0x27
                 ; 0000 0090             press_duration++;
0001ba 01f4      	MOVW R30,R8
0001bb 9631      	ADIW R30,1
0001bc 014f      	MOVW R8,R30
                 ; 0000 0091             delay_ms(1);
0001bd e0a1      	LDI  R26,LOW(1)
0001be e0b0      	LDI  R27,0
0001bf 940e 036d 	CALL _delay_ms
                 ; 0000 0092         }
0001c1 cff6      	RJMP _0x25
                 _0x27:
                 ; 0000 0093         button_pressed = 1;
0001c2 e0e1      	LDI  R30,LOW(1)
0001c3 e0f0      	LDI  R31,HIGH(1)
0001c4 013f      	MOVW R6,R30
                 ; 0000 0094     }
                 ; 0000 0095 }
                 _0x24:
0001c5 91e9      	LD   R30,Y+
0001c6 bfef      	OUT  SREG,R30
0001c7 91f9      	LD   R31,Y+
0001c8 91e9      	LD   R30,Y+
0001c9 91b9      	LD   R27,Y+
0001ca 91a9      	LD   R26,Y+
0001cb 9199      	LD   R25,Y+
0001cc 9189      	LD   R24,Y+
0001cd 9179      	LD   R23,Y+
0001ce 9169      	LD   R22,Y+
0001cf 90f9      	LD   R15,Y+
0001d0 9019      	LD   R1,Y+
0001d1 9009      	LD   R0,Y+
0001d2 9518      	RETI
                 ; .FEND
                 ;
                 ;void process_morse(void) {
                 ; 0000 0097 void process_morse(void) {
                 _process_morse:
                 ; .FSTART _process_morse
                 ; 0000 0098     if (press_duration > DOT_TIME_MS) {
0001d3 e9e0      	LDI  R30,LOW(400)
0001d4 e0f1      	LDI  R31,HIGH(400)
0001d5 15e8      	CP   R30,R8
0001d6 05f9      	CPC  R31,R9
0001d7 f424      	BRGE _0x28
                 ; 0000 0099         morse_buffer[morse_index++] = '-';
0001d8 940e 0358 	CALL SUBOPT_0x4
0001da e2ad      	LDI  R26,LOW(45)
0001db c003      	RJMP _0x39
                 ; 0000 009A     } else {
                 _0x28:
                 ; 0000 009B         morse_buffer[morse_index++] = '.';
0001dc 940e 0358 	CALL SUBOPT_0x4
0001de e2ae      	LDI  R26,LOW(46)
                 _0x39:
0001df 83a0      	STD  Z+0,R26
                 ; 0000 009C     }
                 ; 0000 009D 
                 ; 0000 009E     morse_buffer[morse_index] = '\0';
0001e0 940e 0334 	CALL SUBOPT_0x0
                 ; 0000 009F     lcd_clear();
0001e2 d0ce      	RCALL _lcd_clear
                 ; 0000 00A0     lcd_puts(morse_buffer);
0001e3 e3a3      	LDI  R26,LOW(_morse_buffer)
0001e4 e0b3      	LDI  R27,HIGH(_morse_buffer)
0001e5 d0f9      	RCALL _lcd_puts
                 ; 0000 00A1 
                 ; 0000 00A2     press_duration = 0;
0001e6 2488      	CLR  R8
0001e7 2499      	CLR  R9
                 ; 0000 00A3     idle_time = 0;
0001e8 24aa      	CLR  R10
0001e9 24bb      	CLR  R11
                 ; 0000 00A4 }
0001ea 9508      	RET
                 ; .FEND
                 ;
                 ;void decode_morse(void) {
                 ; 0000 00A6 void decode_morse(void) {
                 _decode_morse:
                 ; .FSTART _decode_morse
                 ; 0000 00A7     // Find the corresponding letter for the morse code
                 ; 0000 00A8 
                 ; 0000 00A9 //sizr morse dict is count chars * 8 bytes = 26* 8
                 ; 0000 00AA // sizeof(morse_dict[0] is 8
                 ; 0000 00AB 
                 ; 0000 00AC     for (i = 0; i < sizeof(morse_dict) / sizeof(morse_dict[0]); i++) {
0001eb 2444      	CLR  R4
0001ec 2455      	CLR  R5
                 _0x2B:
0001ed e1ea      	LDI  R30,LOW(26)
0001ee e0f0      	LDI  R31,HIGH(26)
0001ef 164e      	CP   R4,R30
0001f0 065f      	CPC  R5,R31
0001f1 f584      	BRGE _0x2C
                 ; 0000 00AD         if (strcmp(morse_dict[i].code, morse_buffer) == 0) { //if codes are the same
0001f2 01f2      	MOVW R30,R4
0001f3 e0a3      	LDI  R26,LOW(3)
0001f4 e0b0      	LDI  R27,HIGH(3)
0001f5 940e 0377 	CALL __MULW12U
0001f7 51eb      	SUBI R30,LOW(-_morse_dict)
0001f8 4ffd      	SBCI R31,HIGH(-_morse_dict)
0001f9 01df      	MOVW R26,R30
0001fa 940e 037f 	CALL __GETW1P
0001fc 93fa      	ST   -Y,R31
0001fd 93ea      	ST   -Y,R30
0001fe e3a3      	LDI  R26,LOW(_morse_buffer)
0001ff e0b3      	LDI  R27,HIGH(_morse_buffer)
000200 940e 0320 	CALL _strcmp
000202 30e0      	CPI  R30,0
000203 f4d1      	BRNE _0x2D
                 ; 0000 00AE             eeprom_data[eeprom_index++] = morse_dict[i].letter;
000204 eaa1      	LDI  R26,LOW(_eeprom_index)
000205 e0b3      	LDI  R27,HIGH(_eeprom_index)
000206 91ed      	LD   R30,X+
000207 91fd      	LD   R31,X+
000208 9631      	ADIW R30,1
000209 93fe      	ST   -X,R31
00020a 93ee      	ST   -X,R30
00020b 9731      	SBIW R30,1
00020c 5ce3      	SUBI R30,LOW(-_eeprom_data)
00020d 4ffc      	SBCI R31,HIGH(-_eeprom_data)
00020e 01bf      	MOVW R22,R30
00020f 01f2      	MOVW R30,R4
000210 e0a3      	LDI  R26,LOW(3)
000211 e0b0      	LDI  R27,HIGH(3)
000212 940e 0377 	CALL __MULW12U
                +
000214 51e9     +SUBI R30 , LOW ( - _morse_dict - ( 2 ) )
000215 4ffd     +SBCI R31 , HIGH ( - _morse_dict - ( 2 ) )
                 	__ADDW1MN _morse_dict,2
000216 81e0      	LD   R30,Z
000217 01db      	MOVW R26,R22
000218 93ec      	ST   X,R30
                 ; 0000 00AF             lcd_clear();
000219 d097      	RCALL _lcd_clear
                 ; 0000 00B0             lcd_puts(eeprom_data);
00021a e3ad      	LDI  R26,LOW(_eeprom_data)
00021b e0b3      	LDI  R27,HIGH(_eeprom_data)
00021c d0c2      	RCALL _lcd_puts
                 ; 0000 00B1             break;
00021d c004      	RJMP _0x2C
                 ; 0000 00B2         }
                 ; 0000 00B3     }
                 _0x2D:
00021e 01f2      	MOVW R30,R4
00021f 9631      	ADIW R30,1
000220 012f      	MOVW R4,R30
000221 cfcb      	RJMP _0x2B
                 _0x2C:
                 ; 0000 00B4 }
000222 9508      	RET
                 ; .FEND
                 ;
                 ;void write_morse_to_eeprom(void) {
                 ; 0000 00B6 void write_morse_to_eeprom(void) {
                 _write_morse_to_eeprom:
                 ; .FSTART _write_morse_to_eeprom
                 ; 0000 00B7     for (i = 0; i < eeprom_index; i++) {
000223 2444      	CLR  R4
000224 2455      	CLR  R5
                 _0x2F:
000225 91e0 03a1 	LDS  R30,_eeprom_index
000227 91f0 03a2 	LDS  R31,_eeprom_index+1
000229 164e      	CP   R4,R30
00022a 065f      	CPC  R5,R31
00022b f464      	BRGE _0x30
                 ; 0000 00B8         WRITER_EEPROM(EEPROM_START_ADDR + i, eeprom_data[i]); //write data in eeprom buffer to eeprom one by one
00022c 2de4      	MOV  R30,R4
00022d 93ea      	ST   -Y,R30
00022e e3ad      	LDI  R26,LOW(_eeprom_data)
00022f e0b3      	LDI  R27,HIGH(_eeprom_data)
000230 0da4      	ADD  R26,R4
000231 1db5      	ADC  R27,R5
000232 91ac      	LD   R26,X
000233 dee3      	RCALL _WRITER_EEPROM
                 ; 0000 00B9     }
000234 01f2      	MOVW R30,R4
000235 9631      	ADIW R30,1
000236 012f      	MOVW R4,R30
000237 cfed      	RJMP _0x2F
                 _0x30:
                 ; 0000 00BA     WRITER_EEPROM(EEPROM_START_ADDR + eeprom_index, '\0'); // flag end of data
000238 91e0 03a1 	LDS  R30,_eeprom_index
00023a 93ea      	ST   -Y,R30
00023b e0a0      	LDI  R26,LOW(0)
00023c deda      	RCALL _WRITER_EEPROM
                 ; 0000 00BB     eeprom_index = 0; //clears buffer for new data
00023d e0e0      	LDI  R30,LOW(0)
00023e 93e0 03a1 	STS  _eeprom_index,R30
000240 93e0 03a2 	STS  _eeprom_index+1,R30
                 ; 0000 00BC }
000242 9508      	RET
                 ; .FEND
                 ;
                 ;void read_morse_from_eeprom(void) {
                 ; 0000 00BE void read_morse_from_eeprom(void) {
                 _read_morse_from_eeprom:
                 ; .FSTART _read_morse_from_eeprom
                 ; 0000 00BF     int index = 0;
                 ; 0000 00C0     unsigned char data;
                 ; 0000 00C1 
                 ; 0000 00C2     lcd_clear();
000243 940e 0387 	CALL __SAVELOCR4
                 ;	index -> R16,R17
                 ;	data -> R19
                +
000245 e000     +LDI R16 , LOW ( 0 )
000246 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000247 d069      	RCALL _lcd_clear
                 ; 0000 00C3     while (1) {
                 _0x31:
                 ; 0000 00C4         data = READER_EEPROM(EEPROM_START_ADDR + index);
000248 2fa0      	MOV  R26,R16
000249 deda      	RCALL _READER_EEPROM
00024a 2f3e      	MOV  R19,R30
                 ; 0000 00C5         if (data == '\0') {
00024b 3030      	CPI  R19,0
00024c f069      	BREQ _0x33
                 ; 0000 00C6             // end of message then exit loop
                 ; 0000 00C7             break;
                 ; 0000 00C8         } else if (data == ' ') {
00024d 3230      	CPI  R19,32
00024e f411      	BRNE _0x36
                 ; 0000 00C9             // space between words
                 ; 0000 00CA             lcd_putchar(' ');
00024f e2a0      	LDI  R26,LOW(32)
000250 c001      	RJMP _0x3A
                 ; 0000 00CB         } else {
                 _0x36:
                 ; 0000 00CC             // Display character
                 ; 0000 00CD             lcd_putchar(data);
000251 2fa3      	MOV  R26,R19
                 _0x3A:
000252 d06c      	RCALL _lcd_putchar
                 ; 0000 00CE         }
                 ; 0000 00CF         index++;
                +
000253 5f0f     +SUBI R16 , LOW ( - 1 )
000254 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 00D0         delay_ms(50);  // Delay for visual separation (adjust as needed)
000255 e3a2      	LDI  R26,LOW(50)
000256 e0b0      	LDI  R27,0
000257 940e 036d 	CALL _delay_ms
                 ; 0000 00D1     }
000259 cfee      	RJMP _0x31
                 _0x33:
                 ; 0000 00D2 }
00025a 940e 038c 	CALL __LOADLOCR4
00025c 9624      	ADIW R28,4
00025d 9508      	RET
                 ; .FEND
                 ;
                 ;void reset_system(void) {
                 ; 0000 00D4 void reset_system(void) {
                 _reset_system:
                 ; .FSTART _reset_system
                 ; 0000 00D5     // Perform actions to reset the system
                 ; 0000 00D6     eeprom_index = 0;
00025e e0e0      	LDI  R30,LOW(0)
00025f 93e0 03a1 	STS  _eeprom_index,R30
000261 93e0 03a2 	STS  _eeprom_index+1,R30
                 ; 0000 00D7     morse_index = 0;
000263 24cc      	CLR  R12
000264 24dd      	CLR  R13
                 ; 0000 00D8     word_end_flag = 0;
000265 93e0 03a3 	STS  _word_end_flag,R30
000267 93e0 03a4 	STS  _word_end_flag+1,R30
                 ; 0000 00D9     lcd_clear();
000269 d047      	RCALL _lcd_clear
                 ; 0000 00DA     lcd_puts("System reset");
                +
00026a eda8     +LDI R26 , LOW ( _0x38 + ( 0 ) )
00026b e0b2     +LDI R27 , HIGH ( _0x38 + ( 0 ) )
                 	__POINTW2MN _0x38,0
00026c 940e 0350 	CALL SUBOPT_0x3
                 ; 0000 00DB     delay_ms(1000);
                 ; 0000 00DC     lcd_clear();
                 ; 0000 00DD }
00026e 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _0x38:
0002d8           	.BYTE 0xD
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00026f 93aa      	ST   -Y,R26
000270 81e8      	LD   R30,Y
000271 71e0      	ANDI R30,LOW(0x10)
000272 f011      	BREQ _0x2000004
000273 9aab      	SBI  0x15,3
000274 c001      	RJMP _0x2000005
                 _0x2000004:
000275 98ab      	CBI  0x15,3
                 _0x2000005:
000276 81e8      	LD   R30,Y
000277 72e0      	ANDI R30,LOW(0x20)
000278 f011      	BREQ _0x2000006
000279 9aaa      	SBI  0x15,2
00027a c001      	RJMP _0x2000007
                 _0x2000006:
00027b 98aa      	CBI  0x15,2
                 _0x2000007:
00027c 81e8      	LD   R30,Y
00027d 74e0      	ANDI R30,LOW(0x40)
00027e f011      	BREQ _0x2000008
00027f 9aa9      	SBI  0x15,1
000280 c001      	RJMP _0x2000009
                 _0x2000008:
000281 98a9      	CBI  0x15,1
                 _0x2000009:
000282 81e8      	LD   R30,Y
000283 78e0      	ANDI R30,LOW(0x80)
000284 f011      	BREQ _0x200000A
000285 9aa8      	SBI  0x15,0
000286 c001      	RJMP _0x200000B
                 _0x200000A:
000287 98a8      	CBI  0x15,0
                 _0x200000B:
                +
000288 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000289 958a     +DEC R24
00028a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00028b 9aad      	SBI  0x15,5
                +
00028c e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00028d 958a     +DEC R24
00028e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00028f 98ad      	CBI  0x15,5
                +
000290 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000291 958a     +DEC R24
000292 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000293 c08a      	RJMP _0x2040001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000294 93aa      	ST   -Y,R26
000295 81a8      	LD   R26,Y
000296 dfd8      	RCALL __lcd_write_nibble_G100
000297 81e8          ld    r30,y
000298 95e2          swap  r30
000299 83e8          st    y,r30
00029a 81a8      	LD   R26,Y
00029b dfd3      	RCALL __lcd_write_nibble_G100
                +
00029c e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00029d 958a     +DEC R24
00029e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00029f c07e      	RJMP _0x2040001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002a0 93aa      	ST   -Y,R26
0002a1 81e8      	LD   R30,Y
0002a2 e0f0      	LDI  R31,0
0002a3 55eb      	SUBI R30,LOW(-__base_y_G100)
0002a4 4ffc      	SBCI R31,HIGH(-__base_y_G100)
0002a5 81e0      	LD   R30,Z
0002a6 81a9      	LDD  R26,Y+1
0002a7 0fae      	ADD  R26,R30
0002a8 dfeb      	RCALL __lcd_write_data
0002a9 81e9      	LDD  R30,Y+1
0002aa 93e0 03a9 	STS  __lcd_x,R30
0002ac 81e8      	LD   R30,Y
0002ad 93e0 03aa 	STS  __lcd_y,R30
                 _0x2040002:
0002af 9622      	ADIW R28,2
0002b0 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002b1 e0a2      	LDI  R26,LOW(2)
0002b2 940e 035f 	CALL SUBOPT_0x5
0002b4 e0ac      	LDI  R26,LOW(12)
0002b5 dfde      	RCALL __lcd_write_data
0002b6 e0a1      	LDI  R26,LOW(1)
0002b7 940e 035f 	CALL SUBOPT_0x5
0002b9 e0e0      	LDI  R30,LOW(0)
0002ba 93e0 03aa 	STS  __lcd_y,R30
0002bc 93e0 03a9 	STS  __lcd_x,R30
0002be 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002bf 93aa      	ST   -Y,R26
0002c0 81a8      	LD   R26,Y
0002c1 30aa      	CPI  R26,LOW(0xA)
0002c2 f031      	BREQ _0x2000011
0002c3 91e0 03ab 	LDS  R30,__lcd_maxx
0002c5 91a0 03a9 	LDS  R26,__lcd_x
0002c7 17ae      	CP   R26,R30
0002c8 f060      	BRLO _0x2000010
                 _0x2000011:
0002c9 e0e0      	LDI  R30,LOW(0)
0002ca 93ea      	ST   -Y,R30
0002cb 91a0 03aa 	LDS  R26,__lcd_y
0002cd 5faf      	SUBI R26,-LOW(1)
0002ce 93a0 03aa 	STS  __lcd_y,R26
0002d0 dfcf      	RCALL _lcd_gotoxy
0002d1 81a8      	LD   R26,Y
0002d2 30aa      	CPI  R26,LOW(0xA)
0002d3 f409      	BRNE _0x2000013
0002d4 c049      	RJMP _0x2040001
                 _0x2000013:
                 _0x2000010:
0002d5 91e0 03a9 	LDS  R30,__lcd_x
0002d7 5fef      	SUBI R30,-LOW(1)
0002d8 93e0 03a9 	STS  __lcd_x,R30
0002da 9aaf      	SBI  0x15,7
0002db 81a8      	LD   R26,Y
0002dc dfb7      	RCALL __lcd_write_data
0002dd 98af      	CBI  0x15,7
0002de c03f      	RJMP _0x2040001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0002df 93ba      	ST   -Y,R27
0002e0 93aa      	ST   -Y,R26
0002e1 931a      	ST   -Y,R17
                 _0x2000014:
0002e2 81a9      	LDD  R26,Y+1
0002e3 81ba      	LDD  R27,Y+1+1
0002e4 91ed      	LD   R30,X+
0002e5 83a9      	STD  Y+1,R26
0002e6 83ba      	STD  Y+1+1,R27
0002e7 2f1e      	MOV  R17,R30
0002e8 30e0      	CPI  R30,0
0002e9 f019      	BREQ _0x2000016
0002ea 2fa1      	MOV  R26,R17
0002eb dfd3      	RCALL _lcd_putchar
0002ec cff5      	RJMP _0x2000014
                 _0x2000016:
0002ed 8118      	LDD  R17,Y+0
0002ee 9623      	ADIW R28,3
0002ef 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002f0 93aa      	ST   -Y,R26
0002f1 9aa3      	SBI  0x14,3
0002f2 9aa2      	SBI  0x14,2
0002f3 9aa1      	SBI  0x14,1
0002f4 9aa0      	SBI  0x14,0
0002f5 9aa5      	SBI  0x14,5
0002f6 9aa7      	SBI  0x14,7
0002f7 9aa6      	SBI  0x14,6
0002f8 98ad      	CBI  0x15,5
0002f9 98af      	CBI  0x15,7
0002fa 98ae      	CBI  0x15,6
0002fb 81e8      	LD   R30,Y
0002fc 93e0 03ab 	STS  __lcd_maxx,R30
0002fe 58e0      	SUBI R30,-LOW(128)
                +
0002ff 93e0 03a7+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000301 81e8      	LD   R30,Y
000302 54e0      	SUBI R30,-LOW(192)
                +
000303 93e0 03a8+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000305 e1a4      	LDI  R26,LOW(20)
000306 e0b0      	LDI  R27,0
000307 940e 036d 	CALL _delay_ms
000309 940e 0365 	CALL SUBOPT_0x6
00030b 940e 0365 	CALL SUBOPT_0x6
00030d 940e 0365 	CALL SUBOPT_0x6
00030f e2a0      	LDI  R26,LOW(32)
000310 df5e      	RCALL __lcd_write_nibble_G100
                +
000311 ec88     +LDI R24 , LOW ( 200 )
000312 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000313 9701     +SBIW R24 , 1
000314 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000315 e2a8      	LDI  R26,LOW(40)
000316 df7d      	RCALL __lcd_write_data
000317 e0a4      	LDI  R26,LOW(4)
000318 df7b      	RCALL __lcd_write_data
000319 e8a5      	LDI  R26,LOW(133)
00031a df79      	RCALL __lcd_write_data
00031b e0a6      	LDI  R26,LOW(6)
00031c df77      	RCALL __lcd_write_data
00031d df93      	RCALL _lcd_clear
                 _0x2040001:
00031e 9621      	ADIW R28,1
00031f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcmp:
                 ; .FSTART _strcmp
000320 93ba      	ST   -Y,R27
000321 93aa      	ST   -Y,R26
000322 91e9          ld   r30,y+
000323 91f9          ld   r31,y+
000324 91a9          ld   r26,y+
000325 91b9          ld   r27,y+
                 strcmp0:
000326 916d          ld   r22,x+
000327 9171          ld   r23,z+
000328 1767          cp   r22,r23
000329 f421          brne strcmp1
00032a 2366          tst  r22
00032b f7d1          brne strcmp0
                 strcmp3:
00032c 27ee          clr  r30
00032d 9508          ret
                 strcmp1:
00032e 1b67          sub  r22,r23
00032f f3e1          breq strcmp3
000330 e0e1          ldi  r30,1
000331 f408          brcc strcmp2
000332 50e2          subi r30,2
                 strcmp2:
000333 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _morse_dict:
0002e5           	.BYTE 0x4E
                 _morse_buffer:
000333           	.BYTE 0xA
                 _eeprom_data:
00033d           	.BYTE 0x64
                 _eeprom_index:
0003a1           	.BYTE 0x2
                 _word_end_flag:
0003a3           	.BYTE 0x2
                 __base_y_G100:
0003a5           	.BYTE 0x4
                 __lcd_x:
0003a9           	.BYTE 0x1
                 __lcd_y:
0003aa           	.BYTE 0x1
                 __lcd_maxx:
0003ab           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000334 e3a3      	LDI  R26,LOW(_morse_buffer)
000335 e0b3      	LDI  R27,HIGH(_morse_buffer)
000336 0dac      	ADD  R26,R12
000337 1dbd      	ADC  R27,R13
000338 e0e0      	LDI  R30,LOW(0)
000339 93ec      	ST   X,R30
00033a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
00033b eaa1      	LDI  R26,LOW(_eeprom_index)
00033c e0b3      	LDI  R27,HIGH(_eeprom_index)
00033d 91ed      	LD   R30,X+
00033e 91fd      	LD   R31,X+
00033f 9631      	ADIW R30,1
000340 93fe      	ST   -X,R31
000341 93ee      	ST   -X,R30
000342 9731      	SBIW R30,1
000343 5ce3      	SUBI R30,LOW(-_eeprom_data)
000344 4ffc      	SBCI R31,HIGH(-_eeprom_data)
000345 e2a0      	LDI  R26,LOW(32)
000346 83a0      	STD  Z+0,R26
000347 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
000348 24aa      	CLR  R10
000349 24bb      	CLR  R11
00034a e0e0      	LDI  R30,LOW(0)
00034b 93e0 03a3 	STS  _word_end_flag,R30
00034d 93e0 03a4 	STS  _word_end_flag+1,R30
00034f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
000350 940e 02df 	CALL _lcd_puts
000352 eea8      	LDI  R26,LOW(1000)
000353 e0b3      	LDI  R27,HIGH(1000)
000354 940e 036d 	CALL _delay_ms
000356 940c 02b1 	JMP  _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
000358 01f6      	MOVW R30,R12
000359 9631      	ADIW R30,1
00035a 016f      	MOVW R12,R30
00035b 9731      	SBIW R30,1
00035c 5ced      	SUBI R30,LOW(-_morse_buffer)
00035d 4ffc      	SBCI R31,HIGH(-_morse_buffer)
00035e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
00035f 940e 0294 	CALL __lcd_write_data
000361 e0a3      	LDI  R26,LOW(3)
000362 e0b0      	LDI  R27,0
000363 940c 036d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
000365 e3a0      	LDI  R26,LOW(48)
000366 940e 026f 	CALL __lcd_write_nibble_G100
                +
000368 ec88     +LDI R24 , LOW ( 200 )
000369 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00036a 9701     +SBIW R24 , 1
00036b f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00036c 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00036d 9610      	adiw r26,0
00036e f039      	breq __delay_ms1
                 __delay_ms0:
00036f 95a8      	wdr
                +
000370 ed80     +LDI R24 , LOW ( 0x7D0 )
000371 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000372 9701     +SBIW R24 , 1
000373 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000374 9711      	sbiw r26,1
000375 f7c9      	brne __delay_ms0
                 __delay_ms1:
000376 9508      	ret
                 
                 __MULW12U:
000377 9ffa      	MUL  R31,R26
000378 2df0      	MOV  R31,R0
000379 9feb      	MUL  R30,R27
00037a 0df0      	ADD  R31,R0
00037b 9fea      	MUL  R30,R26
00037c 2de0      	MOV  R30,R0
00037d 0df1      	ADD  R31,R1
00037e 9508      	RET
                 
                 __GETW1P:
00037f 91ed      	LD   R30,X+
000380 91fc      	LD   R31,X
000381 9711      	SBIW R26,1
000382 9508      	RET
                 
                 __CPW02:
000383 2400      	CLR  R0
000384 160a      	CP   R0,R26
000385 060b      	CPC  R0,R27
000386 9508      	RET
                 
                 __SAVELOCR4:
000387 933a      	ST   -Y,R19
                 __SAVELOCR3:
000388 932a      	ST   -Y,R18
                 __SAVELOCR2:
000389 931a      	ST   -Y,R17
00038a 930a      	ST   -Y,R16
00038b 9508      	RET
                 
                 __LOADLOCR4:
00038c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00038d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00038e 8119      	LDD  R17,Y+1
00038f 8108      	LD   R16,Y
000390 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  20 r1 :   4 r2 :   0 r3 :   0 r4 :  12 r5 :   5 r6 :   3 r7 :   2 
r8 :   4 r9 :   2 r10:  10 r11:   8 r12:   8 r13:   6 r14:   0 r15:   2 
r16:   5 r17:   8 r18:   2 r19:   6 r20:   0 r21:   0 r22:  10 r23:   5 
r24:  23 r25:   7 r26:  80 r27:  31 r28:   5 r29:   1 r30: 153 r31:  43 
x  :  18 y  :  78 z  :  12 
Registers used: 30 out of 35 (85.7%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   5 
adiw  :  12 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  12 
brge  :   4 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   5 brmi  :   0 brne  :  16 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  32 
cbi   :  13 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  30 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  11 cpc   :   9 cpi   :   6 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   0 jmp   :  26 ld    :  45 ldd   :   9 ldi   :  97 
lds   :  11 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   9 movw  :  19 
mul   :   3 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   2 out   :  14 pop   :   0 push  :   0 rcall :  30 ret   :  23 
reti  :   1 rjmp  :  32 rol   :   0 ror   :   0 sbc   :   0 sbci  :   7 
sbi   :  20 sbic  :   7 sbis  :   2 sbiw  :  12 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  43 std   :   4 sts   :  19 sub   :   1 subi  :  12 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 49 out of 116 (42.2%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000722   1442    384   1826   32768   5.6%
[.dseg] 0x000060 0x0003ac      0    332    332    2048  16.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 10 warnings
