
AVRASM ver. 2.1.30  D:\UNI\Micro\watch dog\code vision\Debug\List\main.asm Thu Jul 11 15:11:56 2024

D:\UNI\Micro\watch dog\code vision\Debug\List\main.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\UNI\Micro\watch dog\code vision\Debug\List\main.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\UNI\Micro\watch dog\code vision\Debug\List\main.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003e 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 6477
000034 7420
000035 6d69
000036 7265      	.DB  0x77,0x64,0x20,0x74,0x69,0x6D,0x65,0x72
000037 2520
000038 0064      	.DB  0x20,0x25,0x64,0x0
                 _0x2000003:
000039 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003a 0002      	.DW  0x02
00003b 0260      	.DW  __base_y_G100
00003c 0072      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00003d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003e 94f8      	CLI
00003f 27ee      	CLR  R30
000040 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000041 e0f1      	LDI  R31,1
000042 bffb      	OUT  GICR,R31
000043 bfeb      	OUT  GICR,R30
000044 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000045 e08d      	LDI  R24,(14-2)+1
000046 e0a2      	LDI  R26,2
000047 27bb      	CLR  R27
                 __CLEAR_REG:
000048 93ed      	ST   X+,R30
000049 958a      	DEC  R24
00004a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004c e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004e 93ed      	ST   X+,R30
00004f 9701      	SBIW R24,1
000050 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000051 e7e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000052 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000053 9185      	LPM  R24,Z+
000054 9195      	LPM  R25,Z+
000055 9700      	SBIW R24,0
000056 f061      	BREQ __GLOBAL_INI_END
000057 91a5      	LPM  R26,Z+
000058 91b5      	LPM  R27,Z+
000059 9005      	LPM  R0,Z+
00005a 9015      	LPM  R1,Z+
00005b 01bf      	MOVW R22,R30
00005c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005d 9005      	LPM  R0,Z+
00005e 920d      	ST   X+,R0
00005f 9701      	SBIW R24,1
000060 f7e1      	BRNE __GLOBAL_INI_LOOP
000061 01fb      	MOVW R30,R22
000062 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000063 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000064 bfed      	OUT  SPL,R30
000065 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000066 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000067 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000068 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000069 940c 00b4 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;#define F_CPU 8000000UL
                 ;#define LED_PIN PORTB1
                 ;#define EEPROM_ADDR 0x00
                 ;
                 ;void eeprom_write(int addr, int data) {
                 ; 0000 000A void eeprom_write(int addr, int data) {
                 
                 	.CSEG
                 _eeprom_write:
                 ; .FSTART _eeprom_write
                 ; 0000 000B     while (EECR & (1 << EEWE));
00006b 93ba      	ST   -Y,R27
00006c 93aa      	ST   -Y,R26
                 ;	addr -> Y+2
                 ;	data -> Y+0
                 _0x3:
00006d 99e1      	SBIC 0x1C,1
00006e cffe      	RJMP _0x3
                 ; 0000 000C     EEAR = addr;
00006f 81ea      	LDD  R30,Y+2
000070 81fb      	LDD  R31,Y+2+1
000071 bbff      	OUT  0x1E+1,R31
000072 bbee      	OUT  0x1E,R30
                 ; 0000 000D     EEDR = data;
000073 81e8      	LD   R30,Y
000074 bbed      	OUT  0x1D,R30
                 ; 0000 000E     EECR |= (1 << EEMWE);
000075 9ae2      	SBI  0x1C,2
                 ; 0000 000F     EECR |= (1 << EEWE);
000076 9ae1      	SBI  0x1C,1
                 ; 0000 0010 }
000077 9624      	ADIW R28,4
000078 9508      	RET
                 ; .FEND
                 ;
                 ;int eeprom_read(int addr) {
                 ; 0000 0012 int eeprom_read(int addr) {
                 _eeprom_read:
                 ; .FSTART _eeprom_read
                 ; 0000 0013     while (EECR & (1 << EEWE));
000079 93ba      	ST   -Y,R27
00007a 93aa      	ST   -Y,R26
                 ;	addr -> Y+0
                 _0x6:
00007b 99e1      	SBIC 0x1C,1
00007c cffe      	RJMP _0x6
                 ; 0000 0014     EEAR = addr;
00007d 81e8      	LD   R30,Y
00007e 81f9      	LDD  R31,Y+1
00007f bbff      	OUT  0x1E+1,R31
000080 bbee      	OUT  0x1E,R30
                 ; 0000 0015     EECR |= (1 << EERE);
000081 9ae0      	SBI  0x1C,0
                 ; 0000 0016     return EEDR;
000082 b3ed      	IN   R30,0x1D
000083 e0f0      	LDI  R31,0
000084 c080      	RJMP _0x2080003
                 ; 0000 0017 }
                 ; .FEND
                 ;
                 ;void init_watchdog() {
                 ; 0000 0019 void init_watchdog() {
                 _init_watchdog:
                 ; .FSTART _init_watchdog
                 ; 0000 001A     WDTCR = (1 << WDE) | (1 << WDP2) | (1 << WDP1);
000085 e0ee      	LDI  R30,LOW(14)
000086 bde1      	OUT  0x21,R30
                 ; 0000 001B }
000087 9508      	RET
                 ; .FEND
                 ;
                 ;void reset_watchdog() {
                 ; 0000 001D void reset_watchdog() {
                 _reset_watchdog:
                 ; .FSTART _reset_watchdog
                 ; 0000 001E     #asm
                 ; 0000 001F     wdr
000088 95a8          wdr
                 ; 0000 0020     #endasm
                 ; 0000 0021 }
000089 9508      	RET
                 ; .FEND
                 ;
                 ;void init_io() {
                 ; 0000 0023 void init_io() {
                 _init_io:
                 ; .FSTART _init_io
                 ; 0000 0024     DDRB |= (1 << LED_PIN);
00008a 9ab9      	SBI  0x17,1
                 ; 0000 0025     lcd_init(16);
00008b e1a0      	LDI  R26,LOW(16)
00008c d0ac      	RCALL _lcd_init
                 ; 0000 0026     delay_ms(200);
00008d eca8      	LDI  R26,LOW(200)
00008e e0b0      	LDI  R27,0
00008f 940e 0363 	CALL _delay_ms
                 ; 0000 0027     lcd_clear();
000091 d075      	RCALL _lcd_clear
                 ; 0000 0028 }
000092 9508      	RET
                 ; .FEND
                 ;
                 ;void display_reset_count(int count) {
                 ; 0000 002A void display_reset_count(int count) {
                 _display_reset_count:
                 ; .FSTART _display_reset_count
                 ; 0000 002B     char buffer[16];
                 ; 0000 002C     sprintf(buffer, "wd timer %d", count);
000093 93ba      	ST   -Y,R27
000094 93aa      	ST   -Y,R26
000095 9760      	SBIW R28,16
                 ;	count -> Y+16
                 ;	buffer -> Y+0
000096 01fe      	MOVW R30,R28
000097 93fa      	ST   -Y,R31
000098 93ea      	ST   -Y,R30
                +
000099 e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00009a e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00009b 93fa      	ST   -Y,R31
00009c 93ea      	ST   -Y,R30
00009d 89ec      	LDD  R30,Y+20
00009e 89fd      	LDD  R31,Y+20+1
00009f 940e 0375 	CALL __CWD1
0000a1 940e 0382 	CALL __PUTPARD1
0000a3 e084      	LDI  R24,4
0000a4 940e 02dc 	CALL _sprintf
0000a6 9628      	ADIW R28,8
                 ; 0000 002D     lcd_gotoxy(0, 0);
0000a7 e0e0      	LDI  R30,LOW(0)
0000a8 93ea      	ST   -Y,R30
0000a9 e0a0      	LDI  R26,LOW(0)
0000aa d04f      	RCALL _lcd_gotoxy
                 ; 0000 002E     lcd_puts(buffer);
0000ab 01de      	MOVW R26,R28
0000ac d07b      	RCALL _lcd_puts
                 ; 0000 002F }
0000ad 9662      	ADIW R28,18
0000ae 9508      	RET
                 ; .FEND
                 ;
                 ;void delay_long() {
                 ; 0000 0031 void delay_long() {
                 _delay_long:
                 ; .FSTART _delay_long
                 ; 0000 0032     delay_ms(3000);
0000af eba8      	LDI  R26,LOW(3000)
0000b0 e0bb      	LDI  R27,HIGH(3000)
0000b1 940e 0363 	CALL _delay_ms
                 ; 0000 0033 }
0000b3 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void) {
                 ; 0000 0035 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 0036     int count = eeprom_read(EEPROM_ADDR);
                 ; 0000 0037     count++;
                 ;	count -> R16,R17
0000b4 e0a0      	LDI  R26,LOW(0)
0000b5 e0b0      	LDI  R27,0
0000b6 dfc2      	RCALL _eeprom_read
0000b7 018f      	MOVW R16,R30
                +
0000b8 5f0f     +SUBI R16 , LOW ( - 1 )
0000b9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 0038     eeprom_write(EEPROM_ADDR, count);
0000ba e0e0      	LDI  R30,LOW(0)
0000bb e0f0      	LDI  R31,HIGH(0)
0000bc 93fa      	ST   -Y,R31
0000bd 93ea      	ST   -Y,R30
0000be 01d8      	MOVW R26,R16
0000bf dfab      	RCALL _eeprom_write
                 ; 0000 0039     init_io();
0000c0 dfc9      	RCALL _init_io
                 ; 0000 003A     init_watchdog();
0000c1 dfc3      	RCALL _init_watchdog
                 ; 0000 003B     display_reset_count(count);
0000c2 01d8      	MOVW R26,R16
0000c3 dfcf      	RCALL _display_reset_count
                 ; 0000 003C     PORTB |= (1 << LED_PIN);
0000c4 9ac1      	SBI  0x18,1
                 ; 0000 003D 
                 ; 0000 003E     while (1) {
                 _0x9:
                 ; 0000 003F         delay_long();
0000c5 dfe9      	RCALL _delay_long
                 ; 0000 0040         reset_watchdog();
0000c6 dfc1      	RCALL _reset_watchdog
                 ; 0000 0041     }
0000c7 cffd      	RJMP _0x9
                 ; 0000 0042 }
                 _0xC:
0000c8 cfff      	RJMP _0xC
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0000c9 93aa      	ST   -Y,R26
0000ca 81e8      	LD   R30,Y
0000cb 71e0      	ANDI R30,LOW(0x10)
0000cc f011      	BREQ _0x2000004
0000cd 9adb      	SBI  0x1B,3
0000ce c001      	RJMP _0x2000005
                 _0x2000004:
0000cf 98db      	CBI  0x1B,3
                 _0x2000005:
0000d0 81e8      	LD   R30,Y
0000d1 72e0      	ANDI R30,LOW(0x20)
0000d2 f011      	BREQ _0x2000006
0000d3 9ada      	SBI  0x1B,2
0000d4 c001      	RJMP _0x2000007
                 _0x2000006:
0000d5 98da      	CBI  0x1B,2
                 _0x2000007:
0000d6 81e8      	LD   R30,Y
0000d7 74e0      	ANDI R30,LOW(0x40)
0000d8 f011      	BREQ _0x2000008
0000d9 9ad9      	SBI  0x1B,1
0000da c001      	RJMP _0x2000009
                 _0x2000008:
0000db 98d9      	CBI  0x1B,1
                 _0x2000009:
0000dc 81e8      	LD   R30,Y
0000dd 78e0      	ANDI R30,LOW(0x80)
0000de f011      	BREQ _0x200000A
0000df 9ad8      	SBI  0x1B,0
0000e0 c001      	RJMP _0x200000B
                 _0x200000A:
0000e1 98d8      	CBI  0x1B,0
                 _0x200000B:
                +
0000e2 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000e3 958a     +DEC R24
0000e4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000e5 9add      	SBI  0x1B,5
                +
0000e6 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000e7 958a     +DEC R24
0000e8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000e9 98dd      	CBI  0x1B,5
                +
0000ea e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0000eb 958a     +DEC R24
0000ec f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0000ed c078      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0000ee 93aa      	ST   -Y,R26
0000ef 81a8      	LD   R26,Y
0000f0 dfd8      	RCALL __lcd_write_nibble_G100
0000f1 81e8          ld    r30,y
0000f2 95e2          swap  r30
0000f3 83e8          st    y,r30
0000f4 81a8      	LD   R26,Y
0000f5 dfd3      	RCALL __lcd_write_nibble_G100
                +
0000f6 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0000f7 958a     +DEC R24
0000f8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0000f9 c06c      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0000fa 93aa      	ST   -Y,R26
0000fb 81e8      	LD   R30,Y
0000fc e0f0      	LDI  R31,0
0000fd 5ae0      	SUBI R30,LOW(-__base_y_G100)
0000fe 4ffd      	SBCI R31,HIGH(-__base_y_G100)
0000ff 81e0      	LD   R30,Z
000100 81a9      	LDD  R26,Y+1
000101 0fae      	ADD  R26,R30
000102 dfeb      	RCALL __lcd_write_data
000103 8059      	LDD  R5,Y+1
000104 8048      	LDD  R4,Y+0
                 _0x2080003:
000105 9622      	ADIW R28,2
000106 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000107 e0a2      	LDI  R26,LOW(2)
000108 940e 0329 	CALL SUBOPT_0x0
00010a e0ac      	LDI  R26,LOW(12)
00010b dfe2      	RCALL __lcd_write_data
00010c e0a1      	LDI  R26,LOW(1)
00010d 940e 0329 	CALL SUBOPT_0x0
00010f e0e0      	LDI  R30,LOW(0)
000110 2e4e      	MOV  R4,R30
000111 2e5e      	MOV  R5,R30
000112 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000113 93aa      	ST   -Y,R26
000114 81a8      	LD   R26,Y
000115 30aa      	CPI  R26,LOW(0xA)
000116 f011      	BREQ _0x2000011
000117 1457      	CP   R5,R7
000118 f048      	BRLO _0x2000010
                 _0x2000011:
000119 e0e0      	LDI  R30,LOW(0)
00011a 93ea      	ST   -Y,R30
00011b 9443      	INC  R4
00011c 2da4      	MOV  R26,R4
00011d dfdc      	RCALL _lcd_gotoxy
00011e 81a8      	LD   R26,Y
00011f 30aa      	CPI  R26,LOW(0xA)
000120 f409      	BRNE _0x2000013
000121 c044      	RJMP _0x2080002
                 _0x2000013:
                 _0x2000010:
000122 9453      	INC  R5
000123 9adf      	SBI  0x1B,7
000124 81a8      	LD   R26,Y
000125 dfc8      	RCALL __lcd_write_data
000126 98df      	CBI  0x1B,7
000127 c03e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000128 93ba      	ST   -Y,R27
000129 93aa      	ST   -Y,R26
00012a 931a      	ST   -Y,R17
                 _0x2000014:
00012b 81a9      	LDD  R26,Y+1
00012c 81ba      	LDD  R27,Y+1+1
00012d 91ed      	LD   R30,X+
00012e 83a9      	STD  Y+1,R26
00012f 83ba      	STD  Y+1+1,R27
000130 2f1e      	MOV  R17,R30
000131 30e0      	CPI  R30,0
000132 f019      	BREQ _0x2000016
000133 2fa1      	MOV  R26,R17
000134 dfde      	RCALL _lcd_putchar
000135 cff5      	RJMP _0x2000014
                 _0x2000016:
000136 8118      	LDD  R17,Y+0
000137 9623      	ADIW R28,3
000138 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000139 93aa      	ST   -Y,R26
00013a 9ad3      	SBI  0x1A,3
00013b 9ad2      	SBI  0x1A,2
00013c 9ad1      	SBI  0x1A,1
00013d 9ad0      	SBI  0x1A,0
00013e 9ad5      	SBI  0x1A,5
00013f 9ad7      	SBI  0x1A,7
000140 9ad6      	SBI  0x1A,6
000141 98dd      	CBI  0x1B,5
000142 98df      	CBI  0x1B,7
000143 98de      	CBI  0x1B,6
000144 8078      	LDD  R7,Y+0
000145 81e8      	LD   R30,Y
000146 58e0      	SUBI R30,-LOW(128)
                +
000147 93e0 0262+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000149 81e8      	LD   R30,Y
00014a 54e0      	SUBI R30,-LOW(192)
                +
00014b 93e0 0263+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00014d e1a4      	LDI  R26,LOW(20)
00014e e0b0      	LDI  R27,0
00014f 940e 0363 	CALL _delay_ms
000151 940e 032f 	CALL SUBOPT_0x1
000153 940e 032f 	CALL SUBOPT_0x1
000155 940e 032f 	CALL SUBOPT_0x1
000157 e2a0      	LDI  R26,LOW(32)
000158 df70      	RCALL __lcd_write_nibble_G100
                +
000159 ec88     +LDI R24 , LOW ( 200 )
00015a e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00015b 9701     +SBIW R24 , 1
00015c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00015d e2a8      	LDI  R26,LOW(40)
00015e df8f      	RCALL __lcd_write_data
00015f e0a4      	LDI  R26,LOW(4)
000160 df8d      	RCALL __lcd_write_data
000161 e8a5      	LDI  R26,LOW(133)
000162 df8b      	RCALL __lcd_write_data
000163 e0a6      	LDI  R26,LOW(6)
000164 df89      	RCALL __lcd_write_data
000165 dfa1      	RCALL _lcd_clear
                 _0x2080002:
000166 9621      	ADIW R28,1
000167 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
000168 93ba      	ST   -Y,R27
000169 93aa      	ST   -Y,R26
00016a 931a      	ST   -Y,R17
00016b 930a      	ST   -Y,R16
00016c 81aa      	LDD  R26,Y+2
00016d 81bb      	LDD  R27,Y+2+1
00016e 9612      	ADIW R26,2
00016f 940e 037a 	CALL __GETW1P
000171 9730      	SBIW R30,0
000172 f159      	BREQ _0x2020010
000173 81aa      	LDD  R26,Y+2
000174 81bb      	LDD  R27,Y+2+1
000175 9614      	ADIW R26,4
000176 940e 037a 	CALL __GETW1P
000178 018f      	MOVW R16,R30
000179 9730      	SBIW R30,0
00017a f061      	BREQ _0x2020012
                +
00017b 3002     +CPI R16 , LOW ( 2 )
00017c e0e0     +LDI R30 , HIGH ( 2 )
00017d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
00017e f098      	BRLO _0x2020013
00017f 01f8      	MOVW R30,R16
000180 9731      	SBIW R30,1
000181 018f      	MOVW R16,R30
                +
000182 81aa     +LDD R26 , Y + 2
000183 81bb     +LDD R27 , Y + 2 + 1
000184 9614     +ADIW R26 , 4
000185 93ed     +ST X + , R30
000186 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
000187 81aa      	LDD  R26,Y+2
000188 81bb      	LDD  R27,Y+2+1
000189 9612      	ADIW R26,2
00018a 91ed      	LD   R30,X+
00018b 91fd      	LD   R31,X+
00018c 9631      	ADIW R30,1
00018d 93fe      	ST   -X,R31
00018e 93ee      	ST   -X,R30
00018f 9731      	SBIW R30,1
000190 81ac      	LDD  R26,Y+4
000191 83a0      	STD  Z+0,R26
                 _0x2020013:
000192 81aa      	LDD  R26,Y+2
000193 81bb      	LDD  R27,Y+2+1
000194 940e 037a 	CALL __GETW1P
000196 23ff      	TST  R31
000197 f02a      	BRMI _0x2020014
000198 91ed      	LD   R30,X+
000199 91fd      	LD   R31,X+
00019a 9631      	ADIW R30,1
00019b 93fe      	ST   -X,R31
00019c 93ee      	ST   -X,R30
                 _0x2020014:
00019d c006      	RJMP _0x2020015
                 _0x2020010:
00019e 81aa      	LDD  R26,Y+2
00019f 81bb      	LDD  R27,Y+2+1
0001a0 efef      	LDI  R30,LOW(65535)
0001a1 efff      	LDI  R31,HIGH(65535)
0001a2 93ed      	ST   X+,R30
0001a3 93fc      	ST   X,R31
                 _0x2020015:
0001a4 8119      	LDD  R17,Y+1
0001a5 8108      	LDD  R16,Y+0
0001a6 9625      	ADIW R28,5
0001a7 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0001a8 93ba      	ST   -Y,R27
0001a9 93aa      	ST   -Y,R26
0001aa 9726      	SBIW R28,6
0001ab 940e 0387 	CALL __SAVELOCR6
0001ad e010      	LDI  R17,0
0001ae 85ac      	LDD  R26,Y+12
0001af 85bd      	LDD  R27,Y+12+1
0001b0 e0e0      	LDI  R30,LOW(0)
0001b1 e0f0      	LDI  R31,HIGH(0)
0001b2 93ed      	ST   X+,R30
0001b3 93fc      	ST   X,R31
                 _0x2020016:
0001b4 89ea      	LDD  R30,Y+18
0001b5 89fb      	LDD  R31,Y+18+1
0001b6 9631      	ADIW R30,1
0001b7 8bea      	STD  Y+18,R30
0001b8 8bfb      	STD  Y+18+1,R31
0001b9 9731      	SBIW R30,1
0001ba 91e4      	LPM  R30,Z
0001bb 2f2e      	MOV  R18,R30
0001bc 30e0      	CPI  R30,0
0001bd f409      	BRNE PC+2
0001be c115      	RJMP _0x2020018
0001bf 2fe1      	MOV  R30,R17
0001c0 30e0      	CPI  R30,0
0001c1 f439      	BRNE _0x202001C
0001c2 3225      	CPI  R18,37
0001c3 f411      	BRNE _0x202001D
0001c4 e011      	LDI  R17,LOW(1)
0001c5 c002      	RJMP _0x202001E
                 _0x202001D:
0001c6 940e 0337 	CALL SUBOPT_0x2
                 _0x202001E:
0001c8 c10a      	RJMP _0x202001B
                 _0x202001C:
0001c9 30e1      	CPI  R30,LOW(0x1)
0001ca f4a9      	BRNE _0x202001F
0001cb 3225      	CPI  R18,37
0001cc f419      	BRNE _0x2020020
0001cd 940e 0337 	CALL SUBOPT_0x2
0001cf c102      	RJMP _0x20200CC
                 _0x2020020:
0001d0 e012      	LDI  R17,LOW(2)
0001d1 e040      	LDI  R20,LOW(0)
0001d2 e000      	LDI  R16,LOW(0)
0001d3 322d      	CPI  R18,45
0001d4 f411      	BRNE _0x2020021
0001d5 e001      	LDI  R16,LOW(1)
0001d6 c0fc      	RJMP _0x202001B
                 _0x2020021:
0001d7 322b      	CPI  R18,43
0001d8 f411      	BRNE _0x2020022
0001d9 e24b      	LDI  R20,LOW(43)
0001da c0f8      	RJMP _0x202001B
                 _0x2020022:
0001db 3220      	CPI  R18,32
0001dc f411      	BRNE _0x2020023
0001dd e240      	LDI  R20,LOW(32)
0001de c0f4      	RJMP _0x202001B
                 _0x2020023:
0001df c002      	RJMP _0x2020024
                 _0x202001F:
0001e0 30e2      	CPI  R30,LOW(0x2)
0001e1 f439      	BRNE _0x2020025
                 _0x2020024:
0001e2 e050      	LDI  R21,LOW(0)
0001e3 e013      	LDI  R17,LOW(3)
0001e4 3320      	CPI  R18,48
0001e5 f411      	BRNE _0x2020026
0001e6 6800      	ORI  R16,LOW(128)
0001e7 c0eb      	RJMP _0x202001B
                 _0x2020026:
0001e8 c003      	RJMP _0x2020027
                 _0x2020025:
0001e9 30e3      	CPI  R30,LOW(0x3)
0001ea f009      	BREQ PC+2
0001eb c0e7      	RJMP _0x202001B
                 _0x2020027:
0001ec 3320      	CPI  R18,48
0001ed f010      	BRLO _0x202002A
0001ee 332a      	CPI  R18,58
0001ef f008      	BRLO _0x202002B
                 _0x202002A:
0001f0 c007      	RJMP _0x2020029
                 _0x202002B:
0001f1 e0aa      	LDI  R26,LOW(10)
0001f2 9f5a      	MUL  R21,R26
0001f3 2d50      	MOV  R21,R0
0001f4 2fe2      	MOV  R30,R18
0001f5 53e0      	SUBI R30,LOW(48)
0001f6 0f5e      	ADD  R21,R30
0001f7 c0db      	RJMP _0x202001B
                 _0x2020029:
0001f8 2fe2      	MOV  R30,R18
0001f9 36e3      	CPI  R30,LOW(0x63)
0001fa f449      	BRNE _0x202002F
0001fb 940e 033e 	CALL SUBOPT_0x3
0001fd 89e8      	LDD  R30,Y+16
0001fe 89f9      	LDD  R31,Y+16+1
0001ff 81a4      	LDD  R26,Z+4
000200 93aa      	ST   -Y,R26
000201 940e 0344 	CALL SUBOPT_0x4
000203 c0ce      	RJMP _0x2020030
                 _0x202002F:
000204 37e3      	CPI  R30,LOW(0x73)
000205 f441      	BRNE _0x2020032
000206 940e 033e 	CALL SUBOPT_0x3
000208 940e 034a 	CALL SUBOPT_0x5
00020a 940e 0310 	CALL _strlen
00020c 2f1e      	MOV  R17,R30
00020d c00a      	RJMP _0x2020033
                 _0x2020032:
00020e 37e0      	CPI  R30,LOW(0x70)
00020f f461      	BRNE _0x2020035
000210 940e 033e 	CALL SUBOPT_0x3
000212 940e 034a 	CALL SUBOPT_0x5
000214 940e 031c 	CALL _strlenf
000216 2f1e      	MOV  R17,R30
000217 6008      	ORI  R16,LOW(8)
                 _0x2020033:
000218 6002      	ORI  R16,LOW(2)
000219 770f      	ANDI R16,LOW(127)
00021a e030      	LDI  R19,LOW(0)
00021b c034      	RJMP _0x2020036
                 _0x2020035:
00021c 36e4      	CPI  R30,LOW(0x64)
00021d f011      	BREQ _0x2020039
00021e 36e9      	CPI  R30,LOW(0x69)
00021f f411      	BRNE _0x202003A
                 _0x2020039:
000220 6004      	ORI  R16,LOW(4)
000221 c002      	RJMP _0x202003B
                 _0x202003A:
000222 37e5      	CPI  R30,LOW(0x75)
000223 f431      	BRNE _0x202003C
                 _0x202003B:
000224 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
000225 e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
000226 83ee      	STD  Y+6,R30
000227 83ff      	STD  Y+6+1,R31
000228 e015      	LDI  R17,LOW(5)
000229 c00c      	RJMP _0x202003D
                 _0x202003C:
00022a 35e8      	CPI  R30,LOW(0x58)
00022b f411      	BRNE _0x202003F
00022c 6008      	ORI  R16,LOW(8)
00022d c003      	RJMP _0x2020040
                 _0x202003F:
00022e 37e8      	CPI  R30,LOW(0x78)
00022f f009      	BREQ PC+2
000230 c0a1      	RJMP _0x2020071
                 _0x2020040:
000231 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000232 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000233 83ee      	STD  Y+6,R30
000234 83ff      	STD  Y+6+1,R31
000235 e014      	LDI  R17,LOW(4)
                 _0x202003D:
000236 ff02      	SBRS R16,2
000237 c014      	RJMP _0x2020042
000238 940e 033e 	CALL SUBOPT_0x3
00023a 940e 0354 	CALL SUBOPT_0x6
00023c 85ab      	LDD  R26,Y+11
00023d 23aa      	TST  R26
00023e f43a      	BRPL _0x2020043
00023f 85ea      	LDD  R30,Y+10
000240 85fb      	LDD  R31,Y+10+1
000241 940e 0371 	CALL __ANEGW1
000243 87ea      	STD  Y+10,R30
000244 87fb      	STD  Y+10+1,R31
000245 e24d      	LDI  R20,LOW(45)
                 _0x2020043:
000246 3040      	CPI  R20,0
000247 f011      	BREQ _0x2020044
000248 5f1f      	SUBI R17,-LOW(1)
000249 c001      	RJMP _0x2020045
                 _0x2020044:
00024a 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
00024b c004      	RJMP _0x2020046
                 _0x2020042:
00024c 940e 033e 	CALL SUBOPT_0x3
00024e 940e 0354 	CALL SUBOPT_0x6
                 _0x2020046:
                 _0x2020036:
000250 fd00      	SBRC R16,0
000251 c011      	RJMP _0x2020047
                 _0x2020048:
000252 1715      	CP   R17,R21
000253 f478      	BRSH _0x202004A
000254 ff07      	SBRS R16,7
000255 c008      	RJMP _0x202004B
000256 ff02      	SBRS R16,2
000257 c004      	RJMP _0x202004C
000258 7f0b      	ANDI R16,LOW(251)
000259 2f24      	MOV  R18,R20
00025a 5011      	SUBI R17,LOW(1)
00025b c001      	RJMP _0x202004D
                 _0x202004C:
00025c e320      	LDI  R18,LOW(48)
                 _0x202004D:
00025d c001      	RJMP _0x202004E
                 _0x202004B:
00025e e220      	LDI  R18,LOW(32)
                 _0x202004E:
00025f 940e 0337 	CALL SUBOPT_0x2
000261 5051      	SUBI R21,LOW(1)
000262 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
000263 2f31      	MOV  R19,R17
000264 ff01      	SBRS R16,1
000265 c017      	RJMP _0x202004F
                 _0x2020050:
000266 3030      	CPI  R19,0
000267 f0a1      	BREQ _0x2020052
000268 ff03      	SBRS R16,3
000269 c006      	RJMP _0x2020053
00026a 81ee      	LDD  R30,Y+6
00026b 81ff      	LDD  R31,Y+6+1
00026c 9125      	LPM  R18,Z+
00026d 83ee      	STD  Y+6,R30
00026e 83ff      	STD  Y+6+1,R31
00026f c005      	RJMP _0x2020054
                 _0x2020053:
000270 81ae      	LDD  R26,Y+6
000271 81bf      	LDD  R27,Y+6+1
000272 912d      	LD   R18,X+
000273 83ae      	STD  Y+6,R26
000274 83bf      	STD  Y+6+1,R27
                 _0x2020054:
000275 940e 0337 	CALL SUBOPT_0x2
000277 3050      	CPI  R21,0
000278 f009      	BREQ _0x2020055
000279 5051      	SUBI R21,LOW(1)
                 _0x2020055:
00027a 5031      	SUBI R19,LOW(1)
00027b cfea      	RJMP _0x2020050
                 _0x2020052:
00027c c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
00027d e320      	LDI  R18,LOW(48)
00027e 81ee      	LDD  R30,Y+6
00027f 81ff      	LDD  R31,Y+6+1
000280 940e 037e 	CALL __GETW1PF
000282 87e8      	STD  Y+8,R30
000283 87f9      	STD  Y+8+1,R31
000284 81ee      	LDD  R30,Y+6
000285 81ff      	LDD  R31,Y+6+1
000286 9632      	ADIW R30,2
000287 83ee      	STD  Y+6,R30
000288 83ff      	STD  Y+6+1,R31
                 _0x202005A:
000289 85e8      	LDD  R30,Y+8
00028a 85f9      	LDD  R31,Y+8+1
00028b 85aa      	LDD  R26,Y+10
00028c 85bb      	LDD  R27,Y+10+1
00028d 17ae      	CP   R26,R30
00028e 07bf      	CPC  R27,R31
00028f f050      	BRLO _0x202005C
000290 5f2f      	SUBI R18,-LOW(1)
000291 85a8      	LDD  R26,Y+8
000292 85b9      	LDD  R27,Y+8+1
000293 85ea      	LDD  R30,Y+10
000294 85fb      	LDD  R31,Y+10+1
000295 1bea      	SUB  R30,R26
000296 0bfb      	SBC  R31,R27
000297 87ea      	STD  Y+10,R30
000298 87fb      	STD  Y+10+1,R31
000299 cfef      	RJMP _0x202005A
                 _0x202005C:
00029a 332a      	CPI  R18,58
00029b f028      	BRLO _0x202005D
00029c ff03      	SBRS R16,3
00029d c002      	RJMP _0x202005E
00029e 5f29      	SUBI R18,-LOW(7)
00029f c001      	RJMP _0x202005F
                 _0x202005E:
0002a0 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0002a1 fd04      	SBRC R16,4
0002a2 c01a      	RJMP _0x2020061
0002a3 3321      	CPI  R18,49
0002a4 f420      	BRSH _0x2020063
0002a5 85a8      	LDD  R26,Y+8
0002a6 85b9      	LDD  R27,Y+8+1
0002a7 9711      	SBIW R26,1
0002a8 f409      	BRNE _0x2020062
                 _0x2020063:
0002a9 c009      	RJMP _0x20200CD
                 _0x2020062:
0002aa 1753      	CP   R21,R19
0002ab f010      	BRLO _0x2020067
0002ac ff00      	SBRS R16,0
0002ad c001      	RJMP _0x2020068
                 _0x2020067:
0002ae c013      	RJMP _0x2020066
                 _0x2020068:
0002af e220      	LDI  R18,LOW(32)
0002b0 ff07      	SBRS R16,7
0002b1 c00b      	RJMP _0x2020069
0002b2 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0002b3 6100      	ORI  R16,LOW(16)
0002b4 ff02      	SBRS R16,2
0002b5 c007      	RJMP _0x202006A
0002b6 7f0b      	ANDI R16,LOW(251)
0002b7 934a      	ST   -Y,R20
0002b8 940e 0344 	CALL SUBOPT_0x4
0002ba 3050      	CPI  R21,0
0002bb f009      	BREQ _0x202006B
0002bc 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
0002bd 940e 0337 	CALL SUBOPT_0x2
0002bf 3050      	CPI  R21,0
0002c0 f009      	BREQ _0x202006C
0002c1 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
0002c2 5031      	SUBI R19,LOW(1)
0002c3 85a8      	LDD  R26,Y+8
0002c4 85b9      	LDD  R27,Y+8+1
0002c5 9712      	SBIW R26,2
0002c6 f008      	BRLO _0x2020059
0002c7 cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
0002c8 ff00      	SBRS R16,0
0002c9 c008      	RJMP _0x202006D
                 _0x202006E:
0002ca 3050      	CPI  R21,0
0002cb f031      	BREQ _0x2020070
0002cc 5051      	SUBI R21,LOW(1)
0002cd e2e0      	LDI  R30,LOW(32)
0002ce 93ea      	ST   -Y,R30
0002cf 940e 0344 	CALL SUBOPT_0x4
0002d1 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
0002d2 e010      	LDI  R17,LOW(0)
                 _0x202001B:
0002d3 cee0      	RJMP _0x2020016
                 _0x2020018:
0002d4 85ac      	LDD  R26,Y+12
0002d5 85bd      	LDD  R27,Y+12+1
0002d6 940e 037a 	CALL __GETW1P
0002d8 940e 038e 	CALL __LOADLOCR6
0002da 9664      	ADIW R28,20
0002db 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002dc 92ff      	PUSH R15
0002dd 2ef8      	MOV  R15,R24
0002de 9726      	SBIW R28,6
0002df 940e 0389 	CALL __SAVELOCR4
0002e1 940e 035c 	CALL SUBOPT_0x7
0002e3 9730      	SBIW R30,0
0002e4 f419      	BRNE _0x2020072
0002e5 efef      	LDI  R30,LOW(65535)
0002e6 efff      	LDI  R31,HIGH(65535)
0002e7 c023      	RJMP _0x2080001
                 _0x2020072:
0002e8 01de      	MOVW R26,R28
0002e9 9616      	ADIW R26,6
0002ea 940e 036d 	CALL __ADDW2R15
0002ec 018d      	MOVW R16,R26
0002ed 940e 035c 	CALL SUBOPT_0x7
0002ef 83ee      	STD  Y+6,R30
0002f0 83ff      	STD  Y+6+1,R31
0002f1 e0e0      	LDI  R30,LOW(0)
0002f2 87e8      	STD  Y+8,R30
0002f3 87e9      	STD  Y+8+1,R30
0002f4 01de      	MOVW R26,R28
0002f5 961a      	ADIW R26,10
0002f6 940e 036d 	CALL __ADDW2R15
0002f8 940e 037a 	CALL __GETW1P
0002fa 93fa      	ST   -Y,R31
0002fb 93ea      	ST   -Y,R30
0002fc 931a      	ST   -Y,R17
0002fd 930a      	ST   -Y,R16
0002fe e6e8      	LDI  R30,LOW(_put_buff_G101)
0002ff e0f1      	LDI  R31,HIGH(_put_buff_G101)
000300 93fa      	ST   -Y,R31
000301 93ea      	ST   -Y,R30
000302 01de      	MOVW R26,R28
000303 961a      	ADIW R26,10
000304 dea3      	RCALL __print_G101
000305 019f      	MOVW R18,R30
000306 81ae      	LDD  R26,Y+6
000307 81bf      	LDD  R27,Y+6+1
000308 e0e0      	LDI  R30,LOW(0)
000309 93ec      	ST   X,R30
00030a 01f9      	MOVW R30,R18
                 _0x2080001:
00030b 940e 0390 	CALL __LOADLOCR4
00030d 962a      	ADIW R28,10
00030e 90ff      	POP  R15
00030f 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000310 93ba      	ST   -Y,R27
000311 93aa      	ST   -Y,R26
000312 91a9          ld   r26,y+
000313 91b9          ld   r27,y+
000314 27ee          clr  r30
000315 27ff          clr  r31
                 strlen0:
000316 916d          ld   r22,x+
000317 2366          tst  r22
000318 f011          breq strlen1
000319 9631          adiw r30,1
00031a cffb          rjmp strlen0
                 strlen1:
00031b 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00031c 93ba      	ST   -Y,R27
00031d 93aa      	ST   -Y,R26
00031e 27aa          clr  r26
00031f 27bb          clr  r27
000320 91e9          ld   r30,y+
000321 91f9          ld   r31,y+
                 strlenf0:
000322 9005      	lpm  r0,z+
000323 2000          tst  r0
000324 f011          breq strlenf1
000325 9611          adiw r26,1
000326 cffb          rjmp strlenf0
                 strlenf1:
000327 01fd          movw r30,r26
000328 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 __base_y_G100:
000260           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000329 940e 00ee 	CALL __lcd_write_data
00032b e0a3      	LDI  R26,LOW(3)
00032c e0b0      	LDI  R27,0
00032d 940c 0363 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1:
00032f e3a0      	LDI  R26,LOW(48)
000330 940e 00c9 	CALL __lcd_write_nibble_G100
                +
000332 ec88     +LDI R24 , LOW ( 200 )
000333 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000334 9701     +SBIW R24 , 1
000335 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000336 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
000337 932a      	ST   -Y,R18
000338 85ad      	LDD  R26,Y+13
000339 85be      	LDD  R27,Y+13+1
00033a 85ef      	LDD  R30,Y+15
00033b 89f8      	LDD  R31,Y+15+1
00033c 9509      	ICALL
00033d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x3:
00033e 89e8      	LDD  R30,Y+16
00033f 89f9      	LDD  R31,Y+16+1
000340 9734      	SBIW R30,4
000341 8be8      	STD  Y+16,R30
000342 8bf9      	STD  Y+16+1,R31
000343 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000344 85ad      	LDD  R26,Y+13
000345 85be      	LDD  R27,Y+13+1
000346 85ef      	LDD  R30,Y+15
000347 89f8      	LDD  R31,Y+15+1
000348 9509      	ICALL
000349 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
00034a 89a8      	LDD  R26,Y+16
00034b 89b9      	LDD  R27,Y+16+1
00034c 9614      	ADIW R26,4
00034d 940e 037a 	CALL __GETW1P
00034f 83ee      	STD  Y+6,R30
000350 83ff      	STD  Y+6+1,R31
000351 81ae      	LDD  R26,Y+6
000352 81bf      	LDD  R27,Y+6+1
000353 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
000354 89a8      	LDD  R26,Y+16
000355 89b9      	LDD  R27,Y+16+1
000356 9614      	ADIW R26,4
000357 940e 037a 	CALL __GETW1P
000359 87ea      	STD  Y+10,R30
00035a 87fb      	STD  Y+10+1,R31
00035b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00035c 01de      	MOVW R26,R28
00035d 961c      	ADIW R26,12
00035e 940e 036d 	CALL __ADDW2R15
000360 940e 037a 	CALL __GETW1P
000362 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000363 9610      	adiw r26,0
000364 f039      	breq __delay_ms1
                 __delay_ms0:
000365 95a8      	wdr
                +
000366 ed80     +LDI R24 , LOW ( 0x7D0 )
000367 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000368 9701     +SBIW R24 , 1
000369 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00036a 9711      	sbiw r26,1
00036b f7c9      	brne __delay_ms0
                 __delay_ms1:
00036c 9508      	ret
                 
                 __ADDW2R15:
00036d 2400      	CLR  R0
00036e 0daf      	ADD  R26,R15
00036f 1db0      	ADC  R27,R0
000370 9508      	RET
                 
                 __ANEGW1:
000371 95f1      	NEG  R31
000372 95e1      	NEG  R30
000373 40f0      	SBCI R31,0
000374 9508      	RET
                 
                 __CWD1:
000375 2f6f      	MOV  R22,R31
000376 0f66      	ADD  R22,R22
000377 0b66      	SBC  R22,R22
000378 2f76      	MOV  R23,R22
000379 9508      	RET
                 
                 __GETW1P:
00037a 91ed      	LD   R30,X+
00037b 91fc      	LD   R31,X
00037c 9711      	SBIW R26,1
00037d 9508      	RET
                 
                 __GETW1PF:
00037e 9005      	LPM  R0,Z+
00037f 91f4      	LPM  R31,Z
000380 2de0      	MOV  R30,R0
000381 9508      	RET
                 
                 __PUTPARD1:
000382 937a      	ST   -Y,R23
000383 936a      	ST   -Y,R22
000384 93fa      	ST   -Y,R31
000385 93ea      	ST   -Y,R30
000386 9508      	RET
                 
                 __SAVELOCR6:
000387 935a      	ST   -Y,R21
                 __SAVELOCR5:
000388 934a      	ST   -Y,R20
                 __SAVELOCR4:
000389 933a      	ST   -Y,R19
                 __SAVELOCR3:
00038a 932a      	ST   -Y,R18
                 __SAVELOCR2:
00038b 931a      	ST   -Y,R17
00038c 930a      	ST   -Y,R16
00038d 9508      	RET
                 
                 __LOADLOCR6:
00038e 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00038f 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000390 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000391 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000392 8119      	LDD  R17,Y+1
000393 8108      	LD   R16,Y
000394 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  38 r17:  25 r18:  29 r19:   8 r20:   9 r21:  17 r22:  11 r23:   2 
r24:  23 r25:   5 r26: 103 r27:  42 r28:  19 r29:   1 r30: 157 r31:  65 
x  :  23 y  : 184 z  :  15 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   4 
adiw  :  26 and   :   0 andi  :   8 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  21 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  30 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  51 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :   2 cpi   :  33 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   1 inc   :   2 jmp   :  23 ld    :  30 ldd   :  82 ldi   :  91 
lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  18 movw  :  19 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   6 out   :  12 pop   :   1 push  :   1 rcall :  25 ret   :  31 
reti  :   0 rjmp  :  66 rol   :   0 ror   :   0 sbc   :   2 sbci  :   3 
sbi   :  18 sbic  :   2 sbis  :   0 sbiw  :  20 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  67 std   :  31 sts   :   2 sub   :   1 subi  :  17 swap  :   1 
tst   :   4 wdr   :   2 
Instructions used: 52 out of 116 (44.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00072a   1794     40   1834   32768   5.6%
[.dseg] 0x000060 0x000264      0      4      4    2048   0.2%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
